/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.dsl.ide.contentassist.antlr.internal.InternalSql_dslParser;
import uk.ac.kcl.dsl.services.Sql_dslGrammarAccess;

public class Sql_dslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(Sql_dslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, Sql_dslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getSelectStatementAccess().getAlternatives_1(), "rule__SelectStatement__Alternatives_1");
			builder.put(grammarAccess.getFromAndWhereClausesAccess().getAlternatives_2_2_0(), "rule__FromAndWhereClauses__Alternatives_2_2_0");
			builder.put(grammarAccess.getWhereDecAccess().getAlternatives_1(), "rule__WhereDec__Alternatives_1");
			builder.put(grammarAccess.getWhereDecAccess().getAlternatives_2(), "rule__WhereDec__Alternatives_2");
			builder.put(grammarAccess.getTableDeclarationAccess().getAttributesAlternatives_4_0(), "rule__TableDeclaration__AttributesAlternatives_4_0");
			builder.put(grammarAccess.getTableDeclarationAccess().getAttributesAlternatives_5_1_0(), "rule__TableDeclaration__AttributesAlternatives_5_1_0");
			builder.put(grammarAccess.getUpdateTableStatementAccess().getAlternatives_5_2_0(), "rule__UpdateTableStatement__Alternatives_5_2_0");
			builder.put(grammarAccess.getSetClauseAccess().getAlternatives_2(), "rule__SetClause__Alternatives_2");
			builder.put(grammarAccess.getAlterTableStatementAccess().getAddDropUpdateAlternatives_3_0(), "rule__AlterTableStatement__AddDropUpdateAlternatives_3_0");
			builder.put(grammarAccess.getFunctionsAccess().getAlternatives(), "rule__Functions__Alternatives");
			builder.put(grammarAccess.getDataStructureTypeAccess().getAlternatives(), "rule__DataStructureType__Alternatives");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup(), "rule__SelectStatement__Group__0");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup_1_1(), "rule__SelectStatement__Group_1_1__0");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup_1_1_1(), "rule__SelectStatement__Group_1_1_1__0");
			builder.put(grammarAccess.getFromAndWhereClausesAccess().getGroup(), "rule__FromAndWhereClauses__Group__0");
			builder.put(grammarAccess.getFromAndWhereClausesAccess().getGroup_2(), "rule__FromAndWhereClauses__Group_2__0");
			builder.put(grammarAccess.getFromAndWhereClausesAccess().getGroup_2_2(), "rule__FromAndWhereClauses__Group_2_2__0");
			builder.put(grammarAccess.getWhereDecAccess().getGroup(), "rule__WhereDec__Group__0");
			builder.put(grammarAccess.getWhereDecAccess().getGroup_2_0(), "rule__WhereDec__Group_2_0__0");
			builder.put(grammarAccess.getDatabaseDeclarationStatementAccess().getGroup(), "rule__DatabaseDeclarationStatement__Group__0");
			builder.put(grammarAccess.getTableDeclarationAccess().getGroup(), "rule__TableDeclaration__Group__0");
			builder.put(grammarAccess.getTableDeclarationAccess().getGroup_5(), "rule__TableDeclaration__Group_5__0");
			builder.put(grammarAccess.getColumnDeclarationAccess().getGroup(), "rule__ColumnDeclaration__Group__0");
			builder.put(grammarAccess.getPrimaryKeyAccess().getGroup(), "rule__PrimaryKey__Group__0");
			builder.put(grammarAccess.getPrimaryKeyAccess().getGroup_4(), "rule__PrimaryKey__Group_4__0");
			builder.put(grammarAccess.getForeignKeyAccess().getGroup(), "rule__ForeignKey__Group__0");
			builder.put(grammarAccess.getForeignKeyAccess().getGroup_4(), "rule__ForeignKey__Group_4__0");
			builder.put(grammarAccess.getForeignKeyAccess().getGroup_10(), "rule__ForeignKey__Group_10__0");
			builder.put(grammarAccess.getDropTableStatementAccess().getGroup(), "rule__DropTableStatement__Group__0");
			builder.put(grammarAccess.getTruncateTableStatementAccess().getGroup(), "rule__TruncateTableStatement__Group__0");
			builder.put(grammarAccess.getDeleteTableStatementAccess().getGroup(), "rule__DeleteTableStatement__Group__0");
			builder.put(grammarAccess.getUpdateTableStatementAccess().getGroup(), "rule__UpdateTableStatement__Group__0");
			builder.put(grammarAccess.getUpdateTableStatementAccess().getGroup_4(), "rule__UpdateTableStatement__Group_4__0");
			builder.put(grammarAccess.getUpdateTableStatementAccess().getGroup_5(), "rule__UpdateTableStatement__Group_5__0");
			builder.put(grammarAccess.getUpdateTableStatementAccess().getGroup_5_2(), "rule__UpdateTableStatement__Group_5_2__0");
			builder.put(grammarAccess.getSetClauseAccess().getGroup(), "rule__SetClause__Group__0");
			builder.put(grammarAccess.getSetClauseAccess().getGroup_2_0(), "rule__SetClause__Group_2_0__0");
			builder.put(grammarAccess.getAlterTableStatementAccess().getGroup(), "rule__AlterTableStatement__Group__0");
			builder.put(grammarAccess.getAlterDropStatementAccess().getGroup(), "rule__AlterDropStatement__Group__0");
			builder.put(grammarAccess.getAlterAddStatementAccess().getGroup(), "rule__AlterAddStatement__Group__0");
			builder.put(grammarAccess.getAlterUpdateStatementAccess().getGroup(), "rule__AlterUpdateStatement__Group__0");
			builder.put(grammarAccess.getVariableDeclarationStatementAccess().getGroup(), "rule__VariableDeclarationStatement__Group__0");
			builder.put(grammarAccess.getREALAccess().getGroup(), "rule__REAL__Group__0");
			builder.put(grammarAccess.getCountFunctionAccess().getGroup(), "rule__CountFunction__Group__0");
			builder.put(grammarAccess.getAvgFunctionAccess().getGroup(), "rule__AvgFunction__Group__0");
			builder.put(grammarAccess.getSumFunctionAccess().getGroup(), "rule__SumFunction__Group__0");
			builder.put(grammarAccess.getMinFunctionAccess().getGroup(), "rule__MinFunction__Group__0");
			builder.put(grammarAccess.getMaxFunctionAccess().getGroup(), "rule__MaxFunction__Group__0");
			builder.put(grammarAccess.getModelAccess().getStatementsAssignment(), "rule__Model__StatementsAssignment");
			builder.put(grammarAccess.getSelectStatementAccess().getColumnAssignment_1_1_0(), "rule__SelectStatement__ColumnAssignment_1_1_0");
			builder.put(grammarAccess.getSelectStatementAccess().getColumnAssignment_1_1_1_1(), "rule__SelectStatement__ColumnAssignment_1_1_1_1");
			builder.put(grammarAccess.getSelectStatementAccess().getXAssignment_2(), "rule__SelectStatement__XAssignment_2");
			builder.put(grammarAccess.getFromAndWhereClausesAccess().getTableAssignment_1(), "rule__FromAndWhereClauses__TableAssignment_1");
			builder.put(grammarAccess.getFromAndWhereClausesAccess().getZAssignment_2_1(), "rule__FromAndWhereClauses__ZAssignment_2_1");
			builder.put(grammarAccess.getFromAndWhereClausesAccess().getZAssignment_2_2_1(), "rule__FromAndWhereClauses__ZAssignment_2_2_1");
			builder.put(grammarAccess.getWhereDecAccess().getColumnAssignment_0(), "rule__WhereDec__ColumnAssignment_0");
			builder.put(grammarAccess.getWhereDecAccess().getNameAssignment_2_0_1(), "rule__WhereDec__NameAssignment_2_0_1");
			builder.put(grammarAccess.getWhereDecAccess().getColumnAssignment_2_1(), "rule__WhereDec__ColumnAssignment_2_1");
			builder.put(grammarAccess.getWhereDecAccess().getValAssignment_2_2(), "rule__WhereDec__ValAssignment_2_2");
			builder.put(grammarAccess.getDatabaseDeclarationStatementAccess().getNameAssignment_2(), "rule__DatabaseDeclarationStatement__NameAssignment_2");
			builder.put(grammarAccess.getCreateTableStatementAccess().getTablesAssignment(), "rule__CreateTableStatement__TablesAssignment");
			builder.put(grammarAccess.getTableDeclarationAccess().getTableAssignment_2(), "rule__TableDeclaration__TableAssignment_2");
			builder.put(grammarAccess.getTableDeclarationAccess().getAttributesAssignment_4(), "rule__TableDeclaration__AttributesAssignment_4");
			builder.put(grammarAccess.getTableDeclarationAccess().getAttributesAssignment_5_1(), "rule__TableDeclaration__AttributesAssignment_5_1");
			builder.put(grammarAccess.getTableNameAccess().getNameAssignment(), "rule__TableName__NameAssignment");
			builder.put(grammarAccess.getColumnDeclarationAccess().getNameAssignment_0(), "rule__ColumnDeclaration__NameAssignment_0");
			builder.put(grammarAccess.getColumnDeclarationAccess().getTypeAssignment_1(), "rule__ColumnDeclaration__TypeAssignment_1");
			builder.put(grammarAccess.getColumnDeclarationAccess().getNotNullAssignment_2(), "rule__ColumnDeclaration__NotNullAssignment_2");
			builder.put(grammarAccess.getPrimaryKeyAccess().getColumnAsPKAssignment_3(), "rule__PrimaryKey__ColumnAsPKAssignment_3");
			builder.put(grammarAccess.getPrimaryKeyAccess().getColumnAsPKAssignment_4_1(), "rule__PrimaryKey__ColumnAsPKAssignment_4_1");
			builder.put(grammarAccess.getForeignKeyAccess().getColumnAsFKAssignment_3(), "rule__ForeignKey__ColumnAsFKAssignment_3");
			builder.put(grammarAccess.getForeignKeyAccess().getColumnAsFKAssignment_4_1(), "rule__ForeignKey__ColumnAsFKAssignment_4_1");
			builder.put(grammarAccess.getForeignKeyAccess().getForeignTableAssignment_7(), "rule__ForeignKey__ForeignTableAssignment_7");
			builder.put(grammarAccess.getForeignKeyAccess().getForeignColumnsAssignment_9(), "rule__ForeignKey__ForeignColumnsAssignment_9");
			builder.put(grammarAccess.getForeignKeyAccess().getForeignColumnsAssignment_10_1(), "rule__ForeignKey__ForeignColumnsAssignment_10_1");
			builder.put(grammarAccess.getDropTableStatementAccess().getTableAssignment_2(), "rule__DropTableStatement__TableAssignment_2");
			builder.put(grammarAccess.getTruncateTableStatementAccess().getTableAssignment_2(), "rule__TruncateTableStatement__TableAssignment_2");
			builder.put(grammarAccess.getDeleteTableStatementAccess().getXAssignment_1(), "rule__DeleteTableStatement__XAssignment_1");
			builder.put(grammarAccess.getUpdateTableStatementAccess().getTableAssignment_1(), "rule__UpdateTableStatement__TableAssignment_1");
			builder.put(grammarAccess.getUpdateTableStatementAccess().getScAssignment_3(), "rule__UpdateTableStatement__ScAssignment_3");
			builder.put(grammarAccess.getUpdateTableStatementAccess().getScAssignment_4_1(), "rule__UpdateTableStatement__ScAssignment_4_1");
			builder.put(grammarAccess.getUpdateTableStatementAccess().getZAssignment_5_1(), "rule__UpdateTableStatement__ZAssignment_5_1");
			builder.put(grammarAccess.getUpdateTableStatementAccess().getZAssignment_5_2_1(), "rule__UpdateTableStatement__ZAssignment_5_2_1");
			builder.put(grammarAccess.getSetClauseAccess().getColumnAssignment_0(), "rule__SetClause__ColumnAssignment_0");
			builder.put(grammarAccess.getSetClauseAccess().getNameAssignment_2_0_1(), "rule__SetClause__NameAssignment_2_0_1");
			builder.put(grammarAccess.getSetClauseAccess().getValAssignment_2_1(), "rule__SetClause__ValAssignment_2_1");
			builder.put(grammarAccess.getAlterTableStatementAccess().getTableAssignment_2(), "rule__AlterTableStatement__TableAssignment_2");
			builder.put(grammarAccess.getAlterTableStatementAccess().getAddDropUpdateAssignment_3(), "rule__AlterTableStatement__AddDropUpdateAssignment_3");
			builder.put(grammarAccess.getAlterDropStatementAccess().getColumnAssignment_2(), "rule__AlterDropStatement__ColumnAssignment_2");
			builder.put(grammarAccess.getAlterAddStatementAccess().getColumnAssignment_1(), "rule__AlterAddStatement__ColumnAssignment_1");
			builder.put(grammarAccess.getAlterUpdateStatementAccess().getColumnAssignment_2(), "rule__AlterUpdateStatement__ColumnAssignment_2");
			builder.put(grammarAccess.getVariableDeclarationStatementAccess().getNameAssignment_1(), "rule__VariableDeclarationStatement__NameAssignment_1");
			builder.put(grammarAccess.getVariableDeclarationStatementAccess().getValueAssignment_3(), "rule__VariableDeclarationStatement__ValueAssignment_3");
			builder.put(grammarAccess.getIntLiteralAccess().getValAssignment(), "rule__IntLiteral__ValAssignment");
			builder.put(grammarAccess.getRealLiteralAccess().getValAssignment(), "rule__RealLiteral__ValAssignment");
			builder.put(grammarAccess.getIntVarExpressionAccess().getVarAssignment(), "rule__IntVarExpression__VarAssignment");
			builder.put(grammarAccess.getCountFunctionAccess().getColumnAssignment_3(), "rule__CountFunction__ColumnAssignment_3");
			builder.put(grammarAccess.getCountFunctionAccess().getXAssignment_5(), "rule__CountFunction__XAssignment_5");
			builder.put(grammarAccess.getAvgFunctionAccess().getColumnAssignment_3(), "rule__AvgFunction__ColumnAssignment_3");
			builder.put(grammarAccess.getAvgFunctionAccess().getXAssignment_5(), "rule__AvgFunction__XAssignment_5");
			builder.put(grammarAccess.getSumFunctionAccess().getColumnAssignment_3(), "rule__SumFunction__ColumnAssignment_3");
			builder.put(grammarAccess.getSumFunctionAccess().getXAssignment_5(), "rule__SumFunction__XAssignment_5");
			builder.put(grammarAccess.getMinFunctionAccess().getColumnAssignment_3(), "rule__MinFunction__ColumnAssignment_3");
			builder.put(grammarAccess.getMinFunctionAccess().getXAssignment_5(), "rule__MinFunction__XAssignment_5");
			builder.put(grammarAccess.getMaxFunctionAccess().getColumnAssignment_3(), "rule__MaxFunction__ColumnAssignment_3");
			builder.put(grammarAccess.getMaxFunctionAccess().getXAssignment_5(), "rule__MaxFunction__XAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private Sql_dslGrammarAccess grammarAccess;

	@Override
	protected InternalSql_dslParser createParser() {
		InternalSql_dslParser result = new InternalSql_dslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public Sql_dslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(Sql_dslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
