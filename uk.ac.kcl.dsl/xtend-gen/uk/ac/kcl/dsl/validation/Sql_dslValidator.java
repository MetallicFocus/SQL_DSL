/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.dsl.validation;

import org.eclipse.xtext.validation.Check;
import uk.ac.kcl.dsl.sql_dsl.DatabaseDeclarationStatement;
import uk.ac.kcl.dsl.sql_dsl.SelectStatement;
import uk.ac.kcl.dsl.sql_dsl.Sql_dslPackage;
import uk.ac.kcl.dsl.validation.AbstractSql_dslValidator;

/**
 * This class contains custom validation rules.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class Sql_dslValidator extends AbstractSql_dslValidator {
  public static final String INVALID_DB_NAME = "invalidDbName";
  
  public static final String INVALID_SAME_SELECT_COLUMNS = "invalidSameSelectColumns";
  
  @Check
  public void checkDatabaseNamesAreUppercaseOnly(final DatabaseDeclarationStatement databaseDeclarationStmt) {
    boolean _equals = databaseDeclarationStmt.getName().equals(databaseDeclarationStmt.getName().toUpperCase());
    boolean _not = (!_equals);
    if (_not) {
      this.warning("Database names should be only formed of capital letters", Sql_dslPackage.Literals.DATABASE_DECLARATION_STATEMENT__NAME, Sql_dslValidator.INVALID_DB_NAME);
    }
  }
  
  @Check
  public void checkSelectTableColumnsAreDifferent(final SelectStatement selectStmt) {
    for (int i = 0; (i < selectStmt.getColumn().size()); i++) {
      for (int j = 0; (j < selectStmt.getColumn().size()); j++) {
        if ((selectStmt.getColumn().get(i).equals(selectStmt.getColumn().get(j)) && (j != i))) {
          this.warning("Columns in select must be unique (not duplicated)", Sql_dslPackage.Literals.SELECT_STATEMENT__COLUMN, Sql_dslValidator.INVALID_SAME_SELECT_COLUMNS);
        }
      }
    }
  }
}
