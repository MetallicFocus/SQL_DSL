/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.dsl.generator;

import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.ExclusiveRange;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import uk.ac.kcl.dsl.sql_dsl.DatabaseDeclarationStatement;
import uk.ac.kcl.dsl.sql_dsl.DeleteTableStatement;
import uk.ac.kcl.dsl.sql_dsl.DropTableStatement;
import uk.ac.kcl.dsl.sql_dsl.Model;
import uk.ac.kcl.dsl.sql_dsl.SetClause;
import uk.ac.kcl.dsl.sql_dsl.Statement;
import uk.ac.kcl.dsl.sql_dsl.TableDeclaration;
import uk.ac.kcl.dsl.sql_dsl.TableName;
import uk.ac.kcl.dsl.sql_dsl.TruncateTableStatement;
import uk.ac.kcl.dsl.sql_dsl.UpdateTableStatement;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class Sql_dslGenerator extends AbstractGenerator {
  private static class Environment {
    private int counter = 0;
    
    public CharSequence getFreshVarName() {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("i");
      int _plusPlus = this.counter++;
      _builder.append(_plusPlus);
      return _builder;
    }
    
    public int exit() {
      return this.counter--;
    }
  }
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Model model = ((Model) _head);
    String _lastSegment = resource.getURI().lastSegment();
    String _plus = (_lastSegment + ".txt");
    fsa.generateFile(_plus, this.doGenerate(model));
  }
  
  public String doGenerate(final Model m) {
    StringConcatenation _builder = new StringConcatenation();
    final Function1<Statement, String> _function = (Statement it) -> {
      return this.generateJavaStatement(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<Statement, String>map(m.getStatements(), _function), "\n");
    _builder.append(_join);
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final Statement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final DatabaseDeclarationStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("CREATE DATABASE ");
    String _name = stmt.getName();
    _builder.append(_name);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final TableDeclaration stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("CREATE TABLE ");
    EList<TableName> _table = stmt.getTable();
    _builder.append(_table);
    _builder.append(" (");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<EObject> _attributes = stmt.getAttributes();
      boolean _hasElements = false;
      for(final EObject at : _attributes) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        EList<EObject> _attributes_1 = stmt.getAttributes();
        _builder.append(_attributes_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append(");");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final DropTableStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      int _size = stmt.getTable().size();
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
      for(final Integer i : _doubleDotLessThan) {
        _builder.append("DROP TABLE ");
        String _name = stmt.getTable().get((i).intValue()).getName();
        _builder.append(_name);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final TruncateTableStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.newLine();
    {
      int _size = stmt.getTable().size();
      ExclusiveRange _doubleDotLessThan = new ExclusiveRange(0, _size, true);
      for(final Integer i : _doubleDotLessThan) {
        _builder.append("TRUNCATE TABLE ");
        String _name = stmt.getTable().get((i).intValue()).getName();
        _builder.append(_name);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final DeleteTableStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("DELETE TABLE ");
    EList<TableName> _table = stmt.getX().getTable();
    _builder.append(_table);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final UpdateTableStatement stmt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("UPDATE TABLE ");
    EList<TableName> _table = stmt.getTable();
    _builder.append(_table);
    _builder.append(" SET ");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<SetClause> _sc = stmt.getSc();
      boolean _hasElements = false;
      for(final SetClause sc : _sc) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "");
        }
        EList<SetClause> _sc_1 = stmt.getSc();
        _builder.append(_sc_1);
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.append(";");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateJavaStatement(final EObject stmt) {
    if (stmt instanceof DatabaseDeclarationStatement) {
      return _generateJavaStatement((DatabaseDeclarationStatement)stmt);
    } else if (stmt instanceof DeleteTableStatement) {
      return _generateJavaStatement((DeleteTableStatement)stmt);
    } else if (stmt instanceof DropTableStatement) {
      return _generateJavaStatement((DropTableStatement)stmt);
    } else if (stmt instanceof TruncateTableStatement) {
      return _generateJavaStatement((TruncateTableStatement)stmt);
    } else if (stmt instanceof UpdateTableStatement) {
      return _generateJavaStatement((UpdateTableStatement)stmt);
    } else if (stmt instanceof Statement) {
      return _generateJavaStatement((Statement)stmt);
    } else if (stmt instanceof TableDeclaration) {
      return _generateJavaStatement((TableDeclaration)stmt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(stmt).toString());
    }
  }
}
