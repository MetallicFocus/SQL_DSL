/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.dsl.sql_dsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

import uk.ac.kcl.dsl.sql_dsl.ColumnDeclaration;
import uk.ac.kcl.dsl.sql_dsl.ForeignKey;
import uk.ac.kcl.dsl.sql_dsl.Sql_dslPackage;
import uk.ac.kcl.dsl.sql_dsl.TableDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Foreign Key</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.dsl.sql_dsl.impl.ForeignKeyImpl#getColumnAsFK <em>Column As FK</em>}</li>
 *   <li>{@link uk.ac.kcl.dsl.sql_dsl.impl.ForeignKeyImpl#getForeignTable <em>Foreign Table</em>}</li>
 *   <li>{@link uk.ac.kcl.dsl.sql_dsl.impl.ForeignKeyImpl#getForeignColumns <em>Foreign Columns</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ForeignKeyImpl extends MinimalEObjectImpl.Container implements ForeignKey
{
  /**
   * The cached value of the '{@link #getColumnAsFK() <em>Column As FK</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumnAsFK()
   * @generated
   * @ordered
   */
  protected EList<ColumnDeclaration> columnAsFK;

  /**
   * The cached value of the '{@link #getForeignTable() <em>Foreign Table</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForeignTable()
   * @generated
   * @ordered
   */
  protected TableDeclaration foreignTable;

  /**
   * The cached value of the '{@link #getForeignColumns() <em>Foreign Columns</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getForeignColumns()
   * @generated
   * @ordered
   */
  protected EList<ColumnDeclaration> foreignColumns;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ForeignKeyImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return Sql_dslPackage.Literals.FOREIGN_KEY;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ColumnDeclaration> getColumnAsFK()
  {
    if (columnAsFK == null)
    {
      columnAsFK = new EObjectResolvingEList<ColumnDeclaration>(ColumnDeclaration.class, this, Sql_dslPackage.FOREIGN_KEY__COLUMN_AS_FK);
    }
    return columnAsFK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableDeclaration getForeignTable()
  {
    if (foreignTable != null && foreignTable.eIsProxy())
    {
      InternalEObject oldForeignTable = (InternalEObject)foreignTable;
      foreignTable = (TableDeclaration)eResolveProxy(oldForeignTable);
      if (foreignTable != oldForeignTable)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, Sql_dslPackage.FOREIGN_KEY__FOREIGN_TABLE, oldForeignTable, foreignTable));
      }
    }
    return foreignTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TableDeclaration basicGetForeignTable()
  {
    return foreignTable;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setForeignTable(TableDeclaration newForeignTable)
  {
    TableDeclaration oldForeignTable = foreignTable;
    foreignTable = newForeignTable;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, Sql_dslPackage.FOREIGN_KEY__FOREIGN_TABLE, oldForeignTable, foreignTable));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ColumnDeclaration> getForeignColumns()
  {
    if (foreignColumns == null)
    {
      foreignColumns = new EObjectResolvingEList<ColumnDeclaration>(ColumnDeclaration.class, this, Sql_dslPackage.FOREIGN_KEY__FOREIGN_COLUMNS);
    }
    return foreignColumns;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case Sql_dslPackage.FOREIGN_KEY__COLUMN_AS_FK:
        return getColumnAsFK();
      case Sql_dslPackage.FOREIGN_KEY__FOREIGN_TABLE:
        if (resolve) return getForeignTable();
        return basicGetForeignTable();
      case Sql_dslPackage.FOREIGN_KEY__FOREIGN_COLUMNS:
        return getForeignColumns();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case Sql_dslPackage.FOREIGN_KEY__COLUMN_AS_FK:
        getColumnAsFK().clear();
        getColumnAsFK().addAll((Collection<? extends ColumnDeclaration>)newValue);
        return;
      case Sql_dslPackage.FOREIGN_KEY__FOREIGN_TABLE:
        setForeignTable((TableDeclaration)newValue);
        return;
      case Sql_dslPackage.FOREIGN_KEY__FOREIGN_COLUMNS:
        getForeignColumns().clear();
        getForeignColumns().addAll((Collection<? extends ColumnDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case Sql_dslPackage.FOREIGN_KEY__COLUMN_AS_FK:
        getColumnAsFK().clear();
        return;
      case Sql_dslPackage.FOREIGN_KEY__FOREIGN_TABLE:
        setForeignTable((TableDeclaration)null);
        return;
      case Sql_dslPackage.FOREIGN_KEY__FOREIGN_COLUMNS:
        getForeignColumns().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case Sql_dslPackage.FOREIGN_KEY__COLUMN_AS_FK:
        return columnAsFK != null && !columnAsFK.isEmpty();
      case Sql_dslPackage.FOREIGN_KEY__FOREIGN_TABLE:
        return foreignTable != null;
      case Sql_dslPackage.FOREIGN_KEY__FOREIGN_COLUMNS:
        return foreignColumns != null && !foreignColumns.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ForeignKeyImpl
