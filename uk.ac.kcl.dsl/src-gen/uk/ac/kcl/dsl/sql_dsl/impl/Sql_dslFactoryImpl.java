/**
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.dsl.sql_dsl.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.dsl.sql_dsl.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class Sql_dslFactoryImpl extends EFactoryImpl implements Sql_dslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static Sql_dslFactory init()
  {
    try
    {
      Sql_dslFactory theSql_dslFactory = (Sql_dslFactory)EPackage.Registry.INSTANCE.getEFactory(Sql_dslPackage.eNS_URI);
      if (theSql_dslFactory != null)
      {
        return theSql_dslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new Sql_dslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Sql_dslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case Sql_dslPackage.MODEL: return createModel();
      case Sql_dslPackage.STATEMENT: return createStatement();
      case Sql_dslPackage.SELECT_STATEMENT: return createSelectStatement();
      case Sql_dslPackage.FROM_AND_WHERE_CLAUSES: return createFromAndWhereClauses();
      case Sql_dslPackage.WHERE_DEC: return createWhereDec();
      case Sql_dslPackage.DATABASE_DECLARATION_STATEMENT: return createDatabaseDeclarationStatement();
      case Sql_dslPackage.CREATE_TABLE_STATEMENT: return createCreateTableStatement();
      case Sql_dslPackage.TABLE_DECLARATION: return createTableDeclaration();
      case Sql_dslPackage.TABLE_NAME: return createTableName();
      case Sql_dslPackage.CD: return createCD();
      case Sql_dslPackage.COLUMN_REFERENCING: return createColumnReferencing();
      case Sql_dslPackage.PRIMARY_KEY: return createPrimaryKey();
      case Sql_dslPackage.FOREIGN_KEY: return createForeignKey();
      case Sql_dslPackage.DROP_TABLE_STATEMENT: return createDropTableStatement();
      case Sql_dslPackage.TRUNCATE_TABLE_STATEMENT: return createTruncateTableStatement();
      case Sql_dslPackage.DELETE_TABLE_STATEMENT: return createDeleteTableStatement();
      case Sql_dslPackage.UPDATE_TABLE_STATEMENT: return createUpdateTableStatement();
      case Sql_dslPackage.SET_CLAUSE: return createSetClause();
      case Sql_dslPackage.ALTER_TABLE_STATEMENT: return createAlterTableStatement();
      case Sql_dslPackage.ALTER_DROP_STATEMENT: return createAlterDropStatement();
      case Sql_dslPackage.ALTER_ADD_STATEMENT: return createAlterAddStatement();
      case Sql_dslPackage.ALTER_UPDATE_STATEMENT: return createAlterUpdateStatement();
      case Sql_dslPackage.VARIABLE_DECLARATION_STATEMENT: return createVariableDeclarationStatement();
      case Sql_dslPackage.INT_LITERAL: return createIntLiteral();
      case Sql_dslPackage.REAL_LITERAL: return createRealLiteral();
      case Sql_dslPackage.INT_VAR_EXPRESSION: return createIntVarExpression();
      case Sql_dslPackage.FUNCTIONS: return createFunctions();
      case Sql_dslPackage.COUNT_FUNCTION: return createCountFunction();
      case Sql_dslPackage.AVG_FUNCTION: return createAvgFunction();
      case Sql_dslPackage.SUM_FUNCTION: return createSumFunction();
      case Sql_dslPackage.MIN_FUNCTION: return createMinFunction();
      case Sql_dslPackage.MAX_FUNCTION: return createMaxFunction();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case Sql_dslPackage.DATA_STRUCTURE_TYPE:
        return createDataStructureTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case Sql_dslPackage.DATA_STRUCTURE_TYPE:
        return convertDataStructureTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Statement createStatement()
  {
    StatementImpl statement = new StatementImpl();
    return statement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelectStatement createSelectStatement()
  {
    SelectStatementImpl selectStatement = new SelectStatementImpl();
    return selectStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public FromAndWhereClauses createFromAndWhereClauses()
  {
    FromAndWhereClausesImpl fromAndWhereClauses = new FromAndWhereClausesImpl();
    return fromAndWhereClauses;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhereDec createWhereDec()
  {
    WhereDecImpl whereDec = new WhereDecImpl();
    return whereDec;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DatabaseDeclarationStatement createDatabaseDeclarationStatement()
  {
    DatabaseDeclarationStatementImpl databaseDeclarationStatement = new DatabaseDeclarationStatementImpl();
    return databaseDeclarationStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CreateTableStatement createCreateTableStatement()
  {
    CreateTableStatementImpl createTableStatement = new CreateTableStatementImpl();
    return createTableStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableDeclaration createTableDeclaration()
  {
    TableDeclarationImpl tableDeclaration = new TableDeclarationImpl();
    return tableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TableName createTableName()
  {
    TableNameImpl tableName = new TableNameImpl();
    return tableName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CD createCD()
  {
    CDImpl cd = new CDImpl();
    return cd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColumnReferencing createColumnReferencing()
  {
    ColumnReferencingImpl columnReferencing = new ColumnReferencingImpl();
    return columnReferencing;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PrimaryKey createPrimaryKey()
  {
    PrimaryKeyImpl primaryKey = new PrimaryKeyImpl();
    return primaryKey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForeignKey createForeignKey()
  {
    ForeignKeyImpl foreignKey = new ForeignKeyImpl();
    return foreignKey;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DropTableStatement createDropTableStatement()
  {
    DropTableStatementImpl dropTableStatement = new DropTableStatementImpl();
    return dropTableStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TruncateTableStatement createTruncateTableStatement()
  {
    TruncateTableStatementImpl truncateTableStatement = new TruncateTableStatementImpl();
    return truncateTableStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeleteTableStatement createDeleteTableStatement()
  {
    DeleteTableStatementImpl deleteTableStatement = new DeleteTableStatementImpl();
    return deleteTableStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public UpdateTableStatement createUpdateTableStatement()
  {
    UpdateTableStatementImpl updateTableStatement = new UpdateTableStatementImpl();
    return updateTableStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SetClause createSetClause()
  {
    SetClauseImpl setClause = new SetClauseImpl();
    return setClause;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlterTableStatement createAlterTableStatement()
  {
    AlterTableStatementImpl alterTableStatement = new AlterTableStatementImpl();
    return alterTableStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlterDropStatement createAlterDropStatement()
  {
    AlterDropStatementImpl alterDropStatement = new AlterDropStatementImpl();
    return alterDropStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlterAddStatement createAlterAddStatement()
  {
    AlterAddStatementImpl alterAddStatement = new AlterAddStatementImpl();
    return alterAddStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AlterUpdateStatement createAlterUpdateStatement()
  {
    AlterUpdateStatementImpl alterUpdateStatement = new AlterUpdateStatementImpl();
    return alterUpdateStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclarationStatement createVariableDeclarationStatement()
  {
    VariableDeclarationStatementImpl variableDeclarationStatement = new VariableDeclarationStatementImpl();
    return variableDeclarationStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RealLiteral createRealLiteral()
  {
    RealLiteralImpl realLiteral = new RealLiteralImpl();
    return realLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntVarExpression createIntVarExpression()
  {
    IntVarExpressionImpl intVarExpression = new IntVarExpressionImpl();
    return intVarExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Functions createFunctions()
  {
    FunctionsImpl functions = new FunctionsImpl();
    return functions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public CountFunction createCountFunction()
  {
    CountFunctionImpl countFunction = new CountFunctionImpl();
    return countFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AvgFunction createAvgFunction()
  {
    AvgFunctionImpl avgFunction = new AvgFunctionImpl();
    return avgFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SumFunction createSumFunction()
  {
    SumFunctionImpl sumFunction = new SumFunctionImpl();
    return sumFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MinFunction createMinFunction()
  {
    MinFunctionImpl minFunction = new MinFunctionImpl();
    return minFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MaxFunction createMaxFunction()
  {
    MaxFunctionImpl maxFunction = new MaxFunctionImpl();
    return maxFunction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public DataStructureType createDataStructureTypeFromString(EDataType eDataType, String initialValue)
  {
    DataStructureType result = DataStructureType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertDataStructureTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sql_dslPackage getSql_dslPackage()
  {
    return (Sql_dslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static Sql_dslPackage getPackage()
  {
    return Sql_dslPackage.eINSTANCE;
  }

} //Sql_dslFactoryImpl
