/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.dsl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class Sql_dslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//	statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDatabaseDeclarationStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCreateTableStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDropTableStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTruncateTableStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cAlterTableStatementParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cVariableDeclarationStatementParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cSelectStatementParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDeleteTableStatementParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cUpdateTableStatementParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cFunctionsParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		
		//Statement:
		//	DatabaseDeclarationStatement | CreateTableStatement | DropTableStatement | TruncateTableStatement |
		//	AlterTableStatement | VariableDeclarationStatement | SelectStatement | DeleteTableStatement | UpdateTableStatement |
		//	Functions;
		@Override public ParserRule getRule() { return rule; }
		
		//DatabaseDeclarationStatement | CreateTableStatement | DropTableStatement | TruncateTableStatement | AlterTableStatement
		//| VariableDeclarationStatement | SelectStatement | DeleteTableStatement | UpdateTableStatement | Functions
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DatabaseDeclarationStatement
		public RuleCall getDatabaseDeclarationStatementParserRuleCall_0() { return cDatabaseDeclarationStatementParserRuleCall_0; }
		
		//CreateTableStatement
		public RuleCall getCreateTableStatementParserRuleCall_1() { return cCreateTableStatementParserRuleCall_1; }
		
		//DropTableStatement
		public RuleCall getDropTableStatementParserRuleCall_2() { return cDropTableStatementParserRuleCall_2; }
		
		//TruncateTableStatement
		public RuleCall getTruncateTableStatementParserRuleCall_3() { return cTruncateTableStatementParserRuleCall_3; }
		
		//AlterTableStatement
		public RuleCall getAlterTableStatementParserRuleCall_4() { return cAlterTableStatementParserRuleCall_4; }
		
		//VariableDeclarationStatement
		public RuleCall getVariableDeclarationStatementParserRuleCall_5() { return cVariableDeclarationStatementParserRuleCall_5; }
		
		//SelectStatement
		public RuleCall getSelectStatementParserRuleCall_6() { return cSelectStatementParserRuleCall_6; }
		
		//DeleteTableStatement
		public RuleCall getDeleteTableStatementParserRuleCall_7() { return cDeleteTableStatementParserRuleCall_7; }
		
		//UpdateTableStatement
		public RuleCall getUpdateTableStatementParserRuleCall_8() { return cUpdateTableStatementParserRuleCall_8; }
		
		//Functions
		public RuleCall getFunctionsParserRuleCall_9() { return cFunctionsParserRuleCall_9; }
	}
	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.SelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Keyword cAsteriskKeyword_1_0 = (Keyword)cAlternatives_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Assignment cColumnAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final CrossReference cColumnCDCrossReference_1_1_0_0 = (CrossReference)cColumnAssignment_1_1_0.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_1_1_0_0_1 = (RuleCall)cColumnCDCrossReference_1_1_0_0.eContents().get(1);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cColumnAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final CrossReference cColumnCDCrossReference_1_1_1_1_0 = (CrossReference)cColumnAssignment_1_1_1_1.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_1_1_1_1_0_1 = (RuleCall)cColumnCDCrossReference_1_1_1_1_0.eContents().get(1);
		private final Assignment cXAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cXFromAndWhereClausesParserRuleCall_2_0 = (RuleCall)cXAssignment_2.eContents().get(0);
		
		///*
		// * 
		// * Select Statement
		// * 
		// */ SelectStatement:
		//	"SELECT" ("*" | (column+=[CD] ("," column+=[CD])*)*) x=FromAndWhereClauses;
		@Override public ParserRule getRule() { return rule; }
		
		//"SELECT" ("*" | (column+=[CD] ("," column+=[CD])*)*) x=FromAndWhereClauses
		public Group getGroup() { return cGroup; }
		
		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//("*" | (column+=[CD] ("," column+=[CD])*)*)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//"*"
		public Keyword getAsteriskKeyword_1_0() { return cAsteriskKeyword_1_0; }
		
		//(column+=[CD] ("," column+=[CD])*)*
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_1_1_0() { return cColumnAssignment_1_1_0; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_1_1_0_0() { return cColumnCDCrossReference_1_1_0_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_1_1_0_0_1() { return cColumnCDIDTerminalRuleCall_1_1_0_0_1; }
		
		//("," column+=[CD])*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }
		
		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_1_1_1_1() { return cColumnAssignment_1_1_1_1; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_1_1_1_1_0() { return cColumnCDCrossReference_1_1_1_1_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_1_1_1_1_0_1() { return cColumnCDIDTerminalRuleCall_1_1_1_1_0_1; }
		
		//x=FromAndWhereClauses
		public Assignment getXAssignment_2() { return cXAssignment_2; }
		
		//FromAndWhereClauses
		public RuleCall getXFromAndWhereClausesParserRuleCall_2_0() { return cXFromAndWhereClausesParserRuleCall_2_0; }
	}
	public class FromAndWhereClausesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.FromAndWhereClauses");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFROMKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTableTableNameCrossReference_1_0 = (CrossReference)cTableAssignment_1.eContents().get(0);
		private final RuleCall cTableTableNameIDTerminalRuleCall_1_0_1 = (RuleCall)cTableTableNameCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cWHEREKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cZAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cZWhereDecParserRuleCall_2_1_0 = (RuleCall)cZAssignment_2_1.eContents().get(0);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Alternatives cAlternatives_2_2_0 = (Alternatives)cGroup_2_2.eContents().get(0);
		private final Keyword cANDKeyword_2_2_0_0 = (Keyword)cAlternatives_2_2_0.eContents().get(0);
		private final Keyword cORKeyword_2_2_0_1 = (Keyword)cAlternatives_2_2_0.eContents().get(1);
		private final Assignment cZAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cZWhereDecParserRuleCall_2_2_1_0 = (RuleCall)cZAssignment_2_2_1.eContents().get(0);
		
		//FromAndWhereClauses:
		//	"FROM" table=[TableName] ("WHERE" z+=WhereDec (("AND" | "OR") z+=WhereDec)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"FROM" table=[TableName] ("WHERE" z+=WhereDec (("AND" | "OR") z+=WhereDec)*)?
		public Group getGroup() { return cGroup; }
		
		//"FROM"
		public Keyword getFROMKeyword_0() { return cFROMKeyword_0; }
		
		//table=[TableName]
		public Assignment getTableAssignment_1() { return cTableAssignment_1; }
		
		//[TableName]
		public CrossReference getTableTableNameCrossReference_1_0() { return cTableTableNameCrossReference_1_0; }
		
		//ID
		public RuleCall getTableTableNameIDTerminalRuleCall_1_0_1() { return cTableTableNameIDTerminalRuleCall_1_0_1; }
		
		//("WHERE" z+=WhereDec (("AND" | "OR") z+=WhereDec)*)?
		public Group getGroup_2() { return cGroup_2; }
		
		//"WHERE"
		public Keyword getWHEREKeyword_2_0() { return cWHEREKeyword_2_0; }
		
		//z+=WhereDec
		public Assignment getZAssignment_2_1() { return cZAssignment_2_1; }
		
		//WhereDec
		public RuleCall getZWhereDecParserRuleCall_2_1_0() { return cZWhereDecParserRuleCall_2_1_0; }
		
		//(("AND" | "OR") z+=WhereDec)*
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//("AND" | "OR")
		public Alternatives getAlternatives_2_2_0() { return cAlternatives_2_2_0; }
		
		//"AND"
		public Keyword getANDKeyword_2_2_0_0() { return cANDKeyword_2_2_0_0; }
		
		//"OR"
		public Keyword getORKeyword_2_2_0_1() { return cORKeyword_2_2_0_1; }
		
		//z+=WhereDec
		public Assignment getZAssignment_2_2_1() { return cZAssignment_2_2_1; }
		
		//WhereDec
		public RuleCall getZWhereDecParserRuleCall_2_2_1_0() { return cZWhereDecParserRuleCall_2_2_1_0; }
	}
	public class WhereDecElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.WhereDec");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cColumnCDCrossReference_0_0 = (CrossReference)cColumnAssignment_0.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_0_0_1 = (RuleCall)cColumnCDCrossReference_0_0.eContents().get(1);
		private final Assignment cSignAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cSignAlternatives_1_0 = (Alternatives)cSignAssignment_1.eContents().get(0);
		private final Keyword cSignEqualsSignKeyword_1_0_0 = (Keyword)cSignAlternatives_1_0.eContents().get(0);
		private final Keyword cSignLessThanSignKeyword_1_0_1 = (Keyword)cSignAlternatives_1_0.eContents().get(1);
		private final Keyword cSignLessThanSignEqualsSignKeyword_1_0_2 = (Keyword)cSignAlternatives_1_0.eContents().get(2);
		private final Keyword cSignGreaterThanSignKeyword_1_0_3 = (Keyword)cSignAlternatives_1_0.eContents().get(3);
		private final Keyword cSignGreaterThanSignEqualsSignKeyword_1_0_4 = (Keyword)cSignAlternatives_1_0.eContents().get(4);
		private final Keyword cSignExclamationMarkEqualsSignKeyword_1_0_5 = (Keyword)cSignAlternatives_1_0.eContents().get(5);
		private final Keyword cSignLIKEKeyword_1_0_6 = (Keyword)cSignAlternatives_1_0.eContents().get(6);
		private final Assignment cRightOperandAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cRightOperandAlternatives_2_0 = (Alternatives)cRightOperandAssignment_2.eContents().get(0);
		private final RuleCall cRightOperandRightOperandOneParserRuleCall_2_0_0 = (RuleCall)cRightOperandAlternatives_2_0.eContents().get(0);
		private final RuleCall cRightOperandRightOperandTwoParserRuleCall_2_0_1 = (RuleCall)cRightOperandAlternatives_2_0.eContents().get(1);
		private final RuleCall cRightOperandRightOperandThreeParserRuleCall_2_0_2 = (RuleCall)cRightOperandAlternatives_2_0.eContents().get(2);
		
		//WhereDec:
		//	column+=[CD] sign=("=" | "<" | "<=" | ">" | ">=" | "!=" | "LIKE") rightOperand=(RightOperandOne | RightOperandTwo |
		//	RightOperandThree);
		@Override public ParserRule getRule() { return rule; }
		
		//column+=[CD] sign=("=" | "<" | "<=" | ">" | ">=" | "!=" | "LIKE") rightOperand=(RightOperandOne | RightOperandTwo |
		//RightOperandThree)
		public Group getGroup() { return cGroup; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_0() { return cColumnAssignment_0; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_0_0() { return cColumnCDCrossReference_0_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_0_0_1() { return cColumnCDIDTerminalRuleCall_0_0_1; }
		
		//sign=("=" | "<" | "<=" | ">" | ">=" | "!=" | "LIKE")
		public Assignment getSignAssignment_1() { return cSignAssignment_1; }
		
		//("=" | "<" | "<=" | ">" | ">=" | "!=" | "LIKE")
		public Alternatives getSignAlternatives_1_0() { return cSignAlternatives_1_0; }
		
		//"="
		public Keyword getSignEqualsSignKeyword_1_0_0() { return cSignEqualsSignKeyword_1_0_0; }
		
		//"<"
		public Keyword getSignLessThanSignKeyword_1_0_1() { return cSignLessThanSignKeyword_1_0_1; }
		
		//"<="
		public Keyword getSignLessThanSignEqualsSignKeyword_1_0_2() { return cSignLessThanSignEqualsSignKeyword_1_0_2; }
		
		//">"
		public Keyword getSignGreaterThanSignKeyword_1_0_3() { return cSignGreaterThanSignKeyword_1_0_3; }
		
		//">="
		public Keyword getSignGreaterThanSignEqualsSignKeyword_1_0_4() { return cSignGreaterThanSignEqualsSignKeyword_1_0_4; }
		
		//"!="
		public Keyword getSignExclamationMarkEqualsSignKeyword_1_0_5() { return cSignExclamationMarkEqualsSignKeyword_1_0_5; }
		
		//"LIKE"
		public Keyword getSignLIKEKeyword_1_0_6() { return cSignLIKEKeyword_1_0_6; }
		
		//rightOperand=(RightOperandOne | RightOperandTwo | RightOperandThree)
		public Assignment getRightOperandAssignment_2() { return cRightOperandAssignment_2; }
		
		//(RightOperandOne | RightOperandTwo | RightOperandThree)
		public Alternatives getRightOperandAlternatives_2_0() { return cRightOperandAlternatives_2_0; }
		
		//RightOperandOne
		public RuleCall getRightOperandRightOperandOneParserRuleCall_2_0_0() { return cRightOperandRightOperandOneParserRuleCall_2_0_0; }
		
		//RightOperandTwo
		public RuleCall getRightOperandRightOperandTwoParserRuleCall_2_0_1() { return cRightOperandRightOperandTwoParserRuleCall_2_0_1; }
		
		//RightOperandThree
		public RuleCall getRightOperandRightOperandThreeParserRuleCall_2_0_2() { return cRightOperandRightOperandThreeParserRuleCall_2_0_2; }
	}
	public class RightOperandOneElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.RightOperandOne");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNumberSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//RightOperandOne:
		//	"#" name=ID "#";
		@Override public ParserRule getRule() { return rule; }
		
		//"#" name=ID "#"
		public Group getGroup() { return cGroup; }
		
		//"#"
		public Keyword getNumberSignKeyword_0() { return cNumberSignKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"#"
		public Keyword getNumberSignKeyword_2() { return cNumberSignKeyword_2; }
	}
	public class RightOperandTwoElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.RightOperandTwo");
		private final Assignment cColumnAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cColumnCDCrossReference_0 = (CrossReference)cColumnAssignment.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_0_1 = (RuleCall)cColumnCDCrossReference_0.eContents().get(1);
		
		//RightOperandTwo:
		//	column+=[CD];
		@Override public ParserRule getRule() { return rule; }
		
		//column+=[CD]
		public Assignment getColumnAssignment() { return cColumnAssignment; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_0() { return cColumnCDCrossReference_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_0_1() { return cColumnCDIDTerminalRuleCall_0_1; }
	}
	public class RightOperandThreeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.RightOperandThree");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//RightOperandThree:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class DatabaseDeclarationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.DatabaseDeclarationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cDATABASEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		///*
		// * 
		// * Database Declaration
		// * 
		// */ DatabaseDeclarationStatement:
		//	"CREATE" "DATABASE" name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//"CREATE" "DATABASE" name=ID
		public Group getGroup() { return cGroup; }
		
		//"CREATE"
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }
		
		//"DATABASE"
		public Keyword getDATABASEKeyword_1() { return cDATABASEKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}
	public class CreateTableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.CreateTableStatement");
		private final Assignment cTablesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cTablesTableDeclarationParserRuleCall_0 = (RuleCall)cTablesAssignment.eContents().get(0);
		
		///*
		// * 
		// * Create Table Declaration
		// * 
		// */ CreateTableStatement:
		//	tables+=TableDeclaration+;
		@Override public ParserRule getRule() { return rule; }
		
		//// Must contain at least one table declaration
		//tables+=TableDeclaration+
		public Assignment getTablesAssignment() { return cTablesAssignment; }
		
		//TableDeclaration
		public RuleCall getTablesTableDeclarationParserRuleCall_0() { return cTablesTableDeclarationParserRuleCall_0; }
	}
	public class TableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.TableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTABLEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTableTableNameParserRuleCall_2_0 = (RuleCall)cTableAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cAttributesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cAttributesAlternatives_4_0 = (Alternatives)cAttributesAssignment_4.eContents().get(0);
		private final RuleCall cAttributesColumnDeclarationParserRuleCall_4_0_0 = (RuleCall)cAttributesAlternatives_4_0.eContents().get(0);
		private final RuleCall cAttributesPrimaryKeyParserRuleCall_4_0_1 = (RuleCall)cAttributesAlternatives_4_0.eContents().get(1);
		private final RuleCall cAttributesForeignKeyParserRuleCall_4_0_2 = (RuleCall)cAttributesAlternatives_4_0.eContents().get(2);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cAttributesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final Alternatives cAttributesAlternatives_5_1_0 = (Alternatives)cAttributesAssignment_5_1.eContents().get(0);
		private final RuleCall cAttributesColumnDeclarationParserRuleCall_5_1_0_0 = (RuleCall)cAttributesAlternatives_5_1_0.eContents().get(0);
		private final RuleCall cAttributesPrimaryKeyParserRuleCall_5_1_0_1 = (RuleCall)cAttributesAlternatives_5_1_0.eContents().get(1);
		private final RuleCall cAttributesForeignKeyParserRuleCall_5_1_0_2 = (RuleCall)cAttributesAlternatives_5_1_0.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//TableDeclaration: // Create statement for the table generation
		//	"CREATE" "TABLE" table+=tableName "(" attributes+=(ColumnDeclaration | PrimaryKey | ForeignKey)+ (","
		//	attributes+=(ColumnDeclaration | PrimaryKey | ForeignKey))* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//// Create statement for the table generation
		//"CREATE" "TABLE" table+=tableName "(" attributes+=(ColumnDeclaration | PrimaryKey | ForeignKey)+ (","
		//attributes+=(ColumnDeclaration | PrimaryKey | ForeignKey))* ")"
		public Group getGroup() { return cGroup; }
		
		//// Create statement for the table generation
		//"CREATE"
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }
		
		//"TABLE"
		public Keyword getTABLEKeyword_1() { return cTABLEKeyword_1; }
		
		//table+=tableName
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }
		
		//tableName
		public RuleCall getTableTableNameParserRuleCall_2_0() { return cTableTableNameParserRuleCall_2_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//attributes+=(ColumnDeclaration | PrimaryKey | ForeignKey)+
		public Assignment getAttributesAssignment_4() { return cAttributesAssignment_4; }
		
		//(ColumnDeclaration | PrimaryKey | ForeignKey)
		public Alternatives getAttributesAlternatives_4_0() { return cAttributesAlternatives_4_0; }
		
		//ColumnDeclaration
		public RuleCall getAttributesColumnDeclarationParserRuleCall_4_0_0() { return cAttributesColumnDeclarationParserRuleCall_4_0_0; }
		
		//PrimaryKey
		public RuleCall getAttributesPrimaryKeyParserRuleCall_4_0_1() { return cAttributesPrimaryKeyParserRuleCall_4_0_1; }
		
		//ForeignKey
		public RuleCall getAttributesForeignKeyParserRuleCall_4_0_2() { return cAttributesForeignKeyParserRuleCall_4_0_2; }
		
		//("," attributes+=(ColumnDeclaration | PrimaryKey | ForeignKey))*
		public Group getGroup_5() { return cGroup_5; }
		
		//","
		public Keyword getCommaKeyword_5_0() { return cCommaKeyword_5_0; }
		
		//attributes+=(ColumnDeclaration | PrimaryKey | ForeignKey)
		public Assignment getAttributesAssignment_5_1() { return cAttributesAssignment_5_1; }
		
		//(ColumnDeclaration | PrimaryKey | ForeignKey)
		public Alternatives getAttributesAlternatives_5_1_0() { return cAttributesAlternatives_5_1_0; }
		
		//ColumnDeclaration
		public RuleCall getAttributesColumnDeclarationParserRuleCall_5_1_0_0() { return cAttributesColumnDeclarationParserRuleCall_5_1_0_0; }
		
		//PrimaryKey
		public RuleCall getAttributesPrimaryKeyParserRuleCall_5_1_0_1() { return cAttributesPrimaryKeyParserRuleCall_5_1_0_1; }
		
		//ForeignKey
		public RuleCall getAttributesForeignKeyParserRuleCall_5_1_0_2() { return cAttributesForeignKeyParserRuleCall_5_1_0_2; }
		
		//")"
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
	}
	public class TableNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.tableName");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//tableName TableName:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ColumnDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.ColumnDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTypeDataStructureTypeEnumRuleCall_1_0 = (RuleCall)cTypeAssignment_1.eContents().get(0);
		private final Assignment cNotNullAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Keyword cNotNullNOTNULLKeyword_2_0 = (Keyword)cNotNullAssignment_2.eContents().get(0);
		
		//ColumnDeclaration CD:
		//	name=ID type=DataStructureType notNull?="NOT NULL"?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID type=DataStructureType notNull?="NOT NULL"?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//type=DataStructureType
		public Assignment getTypeAssignment_1() { return cTypeAssignment_1; }
		
		//DataStructureType
		public RuleCall getTypeDataStructureTypeEnumRuleCall_1_0() { return cTypeDataStructureTypeEnumRuleCall_1_0; }
		
		//notNull?="NOT NULL"?
		public Assignment getNotNullAssignment_2() { return cNotNullAssignment_2; }
		
		//"NOT NULL"
		public Keyword getNotNullNOTNULLKeyword_2_0() { return cNotNullNOTNULLKeyword_2_0; }
	}
	public class ColumnReferencingElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.ColumnReferencing");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarCDCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarCDIDTerminalRuleCall_0_1 = (RuleCall)cVarCDCrossReference_0.eContents().get(1);
		
		//ColumnReferencing:
		//	var=[CD];
		@Override public ParserRule getRule() { return rule; }
		
		//var=[CD]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[CD]
		public CrossReference getVarCDCrossReference_0() { return cVarCDCrossReference_0; }
		
		//ID
		public RuleCall getVarCDIDTerminalRuleCall_0_1() { return cVarCDIDTerminalRuleCall_0_1; }
	}
	public class PrimaryKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.PrimaryKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPRIMARYKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cKEYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAsPKAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnAsPKCDCrossReference_3_0 = (CrossReference)cColumnAsPKAssignment_3.eContents().get(0);
		private final RuleCall cColumnAsPKCDIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnAsPKCDCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cColumnAsPKAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cColumnAsPKCDCrossReference_4_1_0 = (CrossReference)cColumnAsPKAssignment_4_1.eContents().get(0);
		private final RuleCall cColumnAsPKCDIDTerminalRuleCall_4_1_0_1 = (RuleCall)cColumnAsPKCDCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//PrimaryKey:
		//	"PRIMARY" "KEY" "("
		//	columnAsPK+=[CD] ("," columnAsPK+=[CD])*
		//	")";
		@Override public ParserRule getRule() { return rule; }
		
		//"PRIMARY" "KEY" "(" columnAsPK+=[CD] ("," columnAsPK+=[CD])* ")"
		public Group getGroup() { return cGroup; }
		
		//"PRIMARY"
		public Keyword getPRIMARYKeyword_0() { return cPRIMARYKeyword_0; }
		
		//"KEY"
		public Keyword getKEYKeyword_1() { return cKEYKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//columnAsPK+=[CD]
		public Assignment getColumnAsPKAssignment_3() { return cColumnAsPKAssignment_3; }
		
		//[CD]
		public CrossReference getColumnAsPKCDCrossReference_3_0() { return cColumnAsPKCDCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnAsPKCDIDTerminalRuleCall_3_0_1() { return cColumnAsPKCDIDTerminalRuleCall_3_0_1; }
		
		//("," columnAsPK+=[CD])*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//columnAsPK+=[CD]
		public Assignment getColumnAsPKAssignment_4_1() { return cColumnAsPKAssignment_4_1; }
		
		//[CD]
		public CrossReference getColumnAsPKCDCrossReference_4_1_0() { return cColumnAsPKCDCrossReference_4_1_0; }
		
		//ID
		public RuleCall getColumnAsPKCDIDTerminalRuleCall_4_1_0_1() { return cColumnAsPKCDIDTerminalRuleCall_4_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ForeignKeyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.ForeignKey");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFOREIGNKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cKEYKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAsFKAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnAsFKCDCrossReference_3_0 = (CrossReference)cColumnAsFKAssignment_3.eContents().get(0);
		private final RuleCall cColumnAsFKCDIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnAsFKCDCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cColumnAsFKAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cColumnAsFKCDCrossReference_4_1_0 = (CrossReference)cColumnAsFKAssignment_4_1.eContents().get(0);
		private final RuleCall cColumnAsFKCDIDTerminalRuleCall_4_1_0_1 = (RuleCall)cColumnAsFKCDCrossReference_4_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cREFERENCESKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cForeignTableAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cForeignTableTableDeclarationCrossReference_7_0 = (CrossReference)cForeignTableAssignment_7.eContents().get(0);
		private final RuleCall cForeignTableTableDeclarationIDTerminalRuleCall_7_0_1 = (RuleCall)cForeignTableTableDeclarationCrossReference_7_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cForeignColumnsAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cForeignColumnsCDCrossReference_9_0 = (CrossReference)cForeignColumnsAssignment_9.eContents().get(0);
		private final RuleCall cForeignColumnsCDIDTerminalRuleCall_9_0_1 = (RuleCall)cForeignColumnsCDCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cCommaKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cForeignColumnsAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cForeignColumnsCDCrossReference_10_1_0 = (CrossReference)cForeignColumnsAssignment_10_1.eContents().get(0);
		private final RuleCall cForeignColumnsCDIDTerminalRuleCall_10_1_0_1 = (RuleCall)cForeignColumnsCDCrossReference_10_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//ForeignKey:
		//	"FOREIGN" "KEY" "("
		//	columnAsFK+=[CD] ("," columnAsFK+=[CD])* ")"
		//	"REFERENCES" foreignTable=[TableDeclaration]
		//	"(" foreignColumns+=[CD] ("," foreignColumns+=[CD])* ")";
		@Override public ParserRule getRule() { return rule; }
		
		//"FOREIGN" "KEY" "(" columnAsFK+=[CD] ("," columnAsFK+=[CD])* ")" "REFERENCES" foreignTable=[TableDeclaration] "("
		//foreignColumns+=[CD] ("," foreignColumns+=[CD])* ")"
		public Group getGroup() { return cGroup; }
		
		//"FOREIGN"
		public Keyword getFOREIGNKeyword_0() { return cFOREIGNKeyword_0; }
		
		//"KEY"
		public Keyword getKEYKeyword_1() { return cKEYKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//columnAsFK+=[CD]
		public Assignment getColumnAsFKAssignment_3() { return cColumnAsFKAssignment_3; }
		
		//[CD]
		public CrossReference getColumnAsFKCDCrossReference_3_0() { return cColumnAsFKCDCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnAsFKCDIDTerminalRuleCall_3_0_1() { return cColumnAsFKCDIDTerminalRuleCall_3_0_1; }
		
		//("," columnAsFK+=[CD])*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//columnAsFK+=[CD]
		public Assignment getColumnAsFKAssignment_4_1() { return cColumnAsFKAssignment_4_1; }
		
		//[CD]
		public CrossReference getColumnAsFKCDCrossReference_4_1_0() { return cColumnAsFKCDCrossReference_4_1_0; }
		
		//ID
		public RuleCall getColumnAsFKCDIDTerminalRuleCall_4_1_0_1() { return cColumnAsFKCDIDTerminalRuleCall_4_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//"REFERENCES"
		public Keyword getREFERENCESKeyword_6() { return cREFERENCESKeyword_6; }
		
		//foreignTable=[TableDeclaration]
		public Assignment getForeignTableAssignment_7() { return cForeignTableAssignment_7; }
		
		//[TableDeclaration]
		public CrossReference getForeignTableTableDeclarationCrossReference_7_0() { return cForeignTableTableDeclarationCrossReference_7_0; }
		
		//ID
		public RuleCall getForeignTableTableDeclarationIDTerminalRuleCall_7_0_1() { return cForeignTableTableDeclarationIDTerminalRuleCall_7_0_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_8() { return cLeftParenthesisKeyword_8; }
		
		//foreignColumns+=[CD]
		public Assignment getForeignColumnsAssignment_9() { return cForeignColumnsAssignment_9; }
		
		//[CD]
		public CrossReference getForeignColumnsCDCrossReference_9_0() { return cForeignColumnsCDCrossReference_9_0; }
		
		//ID
		public RuleCall getForeignColumnsCDIDTerminalRuleCall_9_0_1() { return cForeignColumnsCDIDTerminalRuleCall_9_0_1; }
		
		//("," foreignColumns+=[CD])*
		public Group getGroup_10() { return cGroup_10; }
		
		//","
		public Keyword getCommaKeyword_10_0() { return cCommaKeyword_10_0; }
		
		//foreignColumns+=[CD]
		public Assignment getForeignColumnsAssignment_10_1() { return cForeignColumnsAssignment_10_1; }
		
		//[CD]
		public CrossReference getForeignColumnsCDCrossReference_10_1_0() { return cForeignColumnsCDCrossReference_10_1_0; }
		
		//ID
		public RuleCall getForeignColumnsCDIDTerminalRuleCall_10_1_0_1() { return cForeignColumnsCDIDTerminalRuleCall_10_1_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_11() { return cRightParenthesisKeyword_11; }
	}
	public class DropTableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.DropTableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDROPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTABLEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTableTableNameCrossReference_2_0 = (CrossReference)cTableAssignment_2.eContents().get(0);
		private final RuleCall cTableTableNameIDTerminalRuleCall_2_0_1 = (RuleCall)cTableTableNameCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTableTableNameCrossReference_3_1_0 = (CrossReference)cTableAssignment_3_1.eContents().get(0);
		private final RuleCall cTableTableNameIDTerminalRuleCall_3_1_0_1 = (RuleCall)cTableTableNameCrossReference_3_1_0.eContents().get(1);
		
		///*
		// * 
		// * Drop Table Statement
		// * 
		// */ DropTableStatement:
		//	"DROP" "TABLE" table+=[TableName] ("," table+=[TableName])*;
		@Override public ParserRule getRule() { return rule; }
		
		//"DROP" "TABLE" table+=[TableName] ("," table+=[TableName])*
		public Group getGroup() { return cGroup; }
		
		//"DROP"
		public Keyword getDROPKeyword_0() { return cDROPKeyword_0; }
		
		//"TABLE"
		public Keyword getTABLEKeyword_1() { return cTABLEKeyword_1; }
		
		//table+=[TableName]
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }
		
		//[TableName]
		public CrossReference getTableTableNameCrossReference_2_0() { return cTableTableNameCrossReference_2_0; }
		
		//ID
		public RuleCall getTableTableNameIDTerminalRuleCall_2_0_1() { return cTableTableNameIDTerminalRuleCall_2_0_1; }
		
		//("," table+=[TableName])*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//table+=[TableName]
		public Assignment getTableAssignment_3_1() { return cTableAssignment_3_1; }
		
		//[TableName]
		public CrossReference getTableTableNameCrossReference_3_1_0() { return cTableTableNameCrossReference_3_1_0; }
		
		//ID
		public RuleCall getTableTableNameIDTerminalRuleCall_3_1_0_1() { return cTableTableNameIDTerminalRuleCall_3_1_0_1; }
	}
	public class TruncateTableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.TruncateTableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTRUNCATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTABLEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTableTableNameCrossReference_2_0 = (CrossReference)cTableAssignment_2.eContents().get(0);
		private final RuleCall cTableTableNameIDTerminalRuleCall_2_0_1 = (RuleCall)cTableTableNameCrossReference_2_0.eContents().get(1);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTableAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cTableTableNameCrossReference_3_1_0 = (CrossReference)cTableAssignment_3_1.eContents().get(0);
		private final RuleCall cTableTableNameIDTerminalRuleCall_3_1_0_1 = (RuleCall)cTableTableNameCrossReference_3_1_0.eContents().get(1);
		
		///*
		// * 
		// * Truncate Table Statement
		// * 
		// */ TruncateTableStatement:
		//	"TRUNCATE" "TABLE" table+=[TableName] ("," table+=[TableName])*;
		@Override public ParserRule getRule() { return rule; }
		
		//"TRUNCATE" "TABLE" table+=[TableName] ("," table+=[TableName])*
		public Group getGroup() { return cGroup; }
		
		//"TRUNCATE"
		public Keyword getTRUNCATEKeyword_0() { return cTRUNCATEKeyword_0; }
		
		//"TABLE"
		public Keyword getTABLEKeyword_1() { return cTABLEKeyword_1; }
		
		//table+=[TableName]
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }
		
		//[TableName]
		public CrossReference getTableTableNameCrossReference_2_0() { return cTableTableNameCrossReference_2_0; }
		
		//ID
		public RuleCall getTableTableNameIDTerminalRuleCall_2_0_1() { return cTableTableNameIDTerminalRuleCall_2_0_1; }
		
		//("," table+=[TableName])*
		public Group getGroup_3() { return cGroup_3; }
		
		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }
		
		//table+=[TableName]
		public Assignment getTableAssignment_3_1() { return cTableAssignment_3_1; }
		
		//[TableName]
		public CrossReference getTableTableNameCrossReference_3_1_0() { return cTableTableNameCrossReference_3_1_0; }
		
		//ID
		public RuleCall getTableTableNameIDTerminalRuleCall_3_1_0_1() { return cTableTableNameIDTerminalRuleCall_3_1_0_1; }
	}
	public class DeleteTableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.DeleteTableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDELETEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cXAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cXFromAndWhereClausesParserRuleCall_1_0 = (RuleCall)cXAssignment_1.eContents().get(0);
		
		///*
		// * 
		// * Delete Table Statement
		// * 
		// * 
		// */ DeleteTableStatement:
		//	"DELETE" x=FromAndWhereClauses;
		@Override public ParserRule getRule() { return rule; }
		
		//"DELETE" x=FromAndWhereClauses
		public Group getGroup() { return cGroup; }
		
		//"DELETE"
		public Keyword getDELETEKeyword_0() { return cDELETEKeyword_0; }
		
		//x=FromAndWhereClauses
		public Assignment getXAssignment_1() { return cXAssignment_1; }
		
		//FromAndWhereClauses
		public RuleCall getXFromAndWhereClausesParserRuleCall_1_0() { return cXFromAndWhereClausesParserRuleCall_1_0; }
	}
	public class UpdateTableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.UpdateTableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cUPDATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTableAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cTableTableNameCrossReference_1_0 = (CrossReference)cTableAssignment_1.eContents().get(0);
		private final RuleCall cTableTableNameIDTerminalRuleCall_1_0_1 = (RuleCall)cTableTableNameCrossReference_1_0.eContents().get(1);
		private final Keyword cSETKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScSetClauseParserRuleCall_3_0 = (RuleCall)cScAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCommaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cScAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cScSetClauseParserRuleCall_4_1_0 = (RuleCall)cScAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cWHEREKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cZAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cZWhereDecParserRuleCall_5_1_0 = (RuleCall)cZAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Alternatives cAlternatives_5_2_0 = (Alternatives)cGroup_5_2.eContents().get(0);
		private final Keyword cANDKeyword_5_2_0_0 = (Keyword)cAlternatives_5_2_0.eContents().get(0);
		private final Keyword cORKeyword_5_2_0_1 = (Keyword)cAlternatives_5_2_0.eContents().get(1);
		private final Assignment cZAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cZWhereDecParserRuleCall_5_2_1_0 = (RuleCall)cZAssignment_5_2_1.eContents().get(0);
		
		///*
		// * 
		// * Update Table Statement
		// * 
		// * 
		// */ UpdateTableStatement:
		//	"UPDATE" table+=[TableName] "SET" sc+=SetClause ("," sc+=SetClause)* ("WHERE" z+=WhereDec (("AND" | "OR")
		//	z+=WhereDec)*)?;
		@Override public ParserRule getRule() { return rule; }
		
		//"UPDATE" table+=[TableName] "SET" sc+=SetClause ("," sc+=SetClause)* ("WHERE" z+=WhereDec (("AND" | "OR")
		//z+=WhereDec)*)?
		public Group getGroup() { return cGroup; }
		
		//"UPDATE"
		public Keyword getUPDATEKeyword_0() { return cUPDATEKeyword_0; }
		
		//table+=[TableName]
		public Assignment getTableAssignment_1() { return cTableAssignment_1; }
		
		//[TableName]
		public CrossReference getTableTableNameCrossReference_1_0() { return cTableTableNameCrossReference_1_0; }
		
		//ID
		public RuleCall getTableTableNameIDTerminalRuleCall_1_0_1() { return cTableTableNameIDTerminalRuleCall_1_0_1; }
		
		//"SET"
		public Keyword getSETKeyword_2() { return cSETKeyword_2; }
		
		//sc+=SetClause
		public Assignment getScAssignment_3() { return cScAssignment_3; }
		
		//SetClause
		public RuleCall getScSetClauseParserRuleCall_3_0() { return cScSetClauseParserRuleCall_3_0; }
		
		//("," sc+=SetClause)*
		public Group getGroup_4() { return cGroup_4; }
		
		//","
		public Keyword getCommaKeyword_4_0() { return cCommaKeyword_4_0; }
		
		//sc+=SetClause
		public Assignment getScAssignment_4_1() { return cScAssignment_4_1; }
		
		//SetClause
		public RuleCall getScSetClauseParserRuleCall_4_1_0() { return cScSetClauseParserRuleCall_4_1_0; }
		
		//("WHERE" z+=WhereDec (("AND" | "OR") z+=WhereDec)*)?
		public Group getGroup_5() { return cGroup_5; }
		
		//"WHERE"
		public Keyword getWHEREKeyword_5_0() { return cWHEREKeyword_5_0; }
		
		//z+=WhereDec
		public Assignment getZAssignment_5_1() { return cZAssignment_5_1; }
		
		//WhereDec
		public RuleCall getZWhereDecParserRuleCall_5_1_0() { return cZWhereDecParserRuleCall_5_1_0; }
		
		//(("AND" | "OR") z+=WhereDec)*
		public Group getGroup_5_2() { return cGroup_5_2; }
		
		//("AND" | "OR")
		public Alternatives getAlternatives_5_2_0() { return cAlternatives_5_2_0; }
		
		//"AND"
		public Keyword getANDKeyword_5_2_0_0() { return cANDKeyword_5_2_0_0; }
		
		//"OR"
		public Keyword getORKeyword_5_2_0_1() { return cORKeyword_5_2_0_1; }
		
		//z+=WhereDec
		public Assignment getZAssignment_5_2_1() { return cZAssignment_5_2_1; }
		
		//WhereDec
		public RuleCall getZWhereDecParserRuleCall_5_2_1_0() { return cZWhereDecParserRuleCall_5_2_1_0; }
	}
	public class SetClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.SetClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cColumnCDCrossReference_0_0 = (CrossReference)cColumnAssignment_0.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_0_0_1 = (RuleCall)cColumnCDCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Group cGroup_2_0 = (Group)cAlternatives_2.eContents().get(0);
		private final Keyword cNumberSignKeyword_2_0_0 = (Keyword)cGroup_2_0.eContents().get(0);
		private final Assignment cNameAssignment_2_0_1 = (Assignment)cGroup_2_0.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_2_0_1_0 = (RuleCall)cNameAssignment_2_0_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_2_0_2 = (Keyword)cGroup_2_0.eContents().get(2);
		private final Assignment cValAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_2_1_0 = (RuleCall)cValAssignment_2_1.eContents().get(0);
		
		//SetClause:
		//	column+=[CD] "=" ("#" name=ID "#" | val=INT);
		@Override public ParserRule getRule() { return rule; }
		
		//column+=[CD] "=" ("#" name=ID "#" | val=INT)
		public Group getGroup() { return cGroup; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_0() { return cColumnAssignment_0; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_0_0() { return cColumnCDCrossReference_0_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_0_0_1() { return cColumnCDIDTerminalRuleCall_0_0_1; }
		
		//"="
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//("#" name=ID "#" | val=INT)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//"#" name=ID "#"
		public Group getGroup_2_0() { return cGroup_2_0; }
		
		//"#"
		public Keyword getNumberSignKeyword_2_0_0() { return cNumberSignKeyword_2_0_0; }
		
		//name=ID
		public Assignment getNameAssignment_2_0_1() { return cNameAssignment_2_0_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0_1_0() { return cNameIDTerminalRuleCall_2_0_1_0; }
		
		//"#"
		public Keyword getNumberSignKeyword_2_0_2() { return cNumberSignKeyword_2_0_2; }
		
		//val=INT
		public Assignment getValAssignment_2_1() { return cValAssignment_2_1; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_2_1_0() { return cValINTTerminalRuleCall_2_1_0; }
	}
	public class AlterTableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.AlterTableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cALTERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTABLEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTableTableNameCrossReference_2_0 = (CrossReference)cTableAssignment_2.eContents().get(0);
		private final RuleCall cTableTableNameIDTerminalRuleCall_2_0_1 = (RuleCall)cTableTableNameCrossReference_2_0.eContents().get(1);
		private final Assignment cAddDropUpdateAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cAddDropUpdateAlternatives_3_0 = (Alternatives)cAddDropUpdateAssignment_3.eContents().get(0);
		private final RuleCall cAddDropUpdateAlterDropStatementParserRuleCall_3_0_0 = (RuleCall)cAddDropUpdateAlternatives_3_0.eContents().get(0);
		private final RuleCall cAddDropUpdateAlterAddStatementParserRuleCall_3_0_1 = (RuleCall)cAddDropUpdateAlternatives_3_0.eContents().get(1);
		private final RuleCall cAddDropUpdateAlterUpdateStatementParserRuleCall_3_0_2 = (RuleCall)cAddDropUpdateAlternatives_3_0.eContents().get(2);
		
		///*
		// * 
		// * Alter Table Statement
		// * 
		// * 
		// */ AlterTableStatement:
		//	"ALTER" "TABLE" table+=[TableName] addDropUpdate=(AlterDropStatement | AlterAddStatement | AlterUpdateStatement);
		@Override public ParserRule getRule() { return rule; }
		
		//"ALTER" "TABLE" table+=[TableName] addDropUpdate=(AlterDropStatement | AlterAddStatement | AlterUpdateStatement)
		public Group getGroup() { return cGroup; }
		
		//"ALTER"
		public Keyword getALTERKeyword_0() { return cALTERKeyword_0; }
		
		//"TABLE"
		public Keyword getTABLEKeyword_1() { return cTABLEKeyword_1; }
		
		//table+=[TableName]
		public Assignment getTableAssignment_2() { return cTableAssignment_2; }
		
		//[TableName]
		public CrossReference getTableTableNameCrossReference_2_0() { return cTableTableNameCrossReference_2_0; }
		
		//ID
		public RuleCall getTableTableNameIDTerminalRuleCall_2_0_1() { return cTableTableNameIDTerminalRuleCall_2_0_1; }
		
		//addDropUpdate=(AlterDropStatement | AlterAddStatement | AlterUpdateStatement)
		public Assignment getAddDropUpdateAssignment_3() { return cAddDropUpdateAssignment_3; }
		
		//(AlterDropStatement | AlterAddStatement | AlterUpdateStatement)
		public Alternatives getAddDropUpdateAlternatives_3_0() { return cAddDropUpdateAlternatives_3_0; }
		
		//AlterDropStatement
		public RuleCall getAddDropUpdateAlterDropStatementParserRuleCall_3_0_0() { return cAddDropUpdateAlterDropStatementParserRuleCall_3_0_0; }
		
		//AlterAddStatement
		public RuleCall getAddDropUpdateAlterAddStatementParserRuleCall_3_0_1() { return cAddDropUpdateAlterAddStatementParserRuleCall_3_0_1; }
		
		//AlterUpdateStatement
		public RuleCall getAddDropUpdateAlterUpdateStatementParserRuleCall_3_0_2() { return cAddDropUpdateAlterUpdateStatementParserRuleCall_3_0_2; }
	}
	public class AlterDropStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.AlterDropStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDROPKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCOLUMNKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cColumnCDCrossReference_2_0 = (CrossReference)cColumnAssignment_2.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_2_0_1 = (RuleCall)cColumnCDCrossReference_2_0.eContents().get(1);
		
		//AlterDropStatement:
		//	"DROP" "COLUMN" column+=[CD];
		@Override public ParserRule getRule() { return rule; }
		
		//"DROP" "COLUMN" column+=[CD]
		public Group getGroup() { return cGroup; }
		
		//"DROP"
		public Keyword getDROPKeyword_0() { return cDROPKeyword_0; }
		
		//"COLUMN"
		public Keyword getCOLUMNKeyword_1() { return cCOLUMNKeyword_1; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_2() { return cColumnAssignment_2; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_2_0() { return cColumnCDCrossReference_2_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_2_0_1() { return cColumnCDIDTerminalRuleCall_2_0_1; }
	}
	public class AlterAddStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.AlterAddStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cADDKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cColumnAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cColumnCDCrossReference_1_0 = (CrossReference)cColumnAssignment_1.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_1_0_1 = (RuleCall)cColumnCDCrossReference_1_0.eContents().get(1);
		
		//AlterAddStatement:
		//	"ADD" column+=[CD];
		@Override public ParserRule getRule() { return rule; }
		
		//"ADD" column+=[CD]
		public Group getGroup() { return cGroup; }
		
		//"ADD"
		public Keyword getADDKeyword_0() { return cADDKeyword_0; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_1() { return cColumnAssignment_1; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_1_0() { return cColumnCDCrossReference_1_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_1_0_1() { return cColumnCDIDTerminalRuleCall_1_0_1; }
	}
	public class AlterUpdateStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.AlterUpdateStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cALTERKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCOLUMNKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cColumnAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cColumnCDCrossReference_2_0 = (CrossReference)cColumnAssignment_2.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_2_0_1 = (RuleCall)cColumnCDCrossReference_2_0.eContents().get(1);
		
		//AlterUpdateStatement:
		//	"ALTER" "COLUMN" column+=[CD];
		@Override public ParserRule getRule() { return rule; }
		
		//"ALTER" "COLUMN" column+=[CD]
		public Group getGroup() { return cGroup; }
		
		//"ALTER"
		public Keyword getALTERKeyword_0() { return cALTERKeyword_0; }
		
		//"COLUMN"
		public Keyword getCOLUMNKeyword_1() { return cCOLUMNKeyword_1; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_2() { return cColumnAssignment_2; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_2_0() { return cColumnCDCrossReference_2_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_2_0_1() { return cColumnCDIDTerminalRuleCall_2_0_1; }
	}
	public class VariableDeclarationStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.VariableDeclarationStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		///*
		// * 
		// * Variable Declaration
		// * 
		// */ VariableDeclarationStatement:
		//	"var" name=ID "=" value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" value=INT
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.IntLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntLiteral:
		//	val=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//val=INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class RealLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.RealLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValREALParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//RealLiteral:
		//	val=REAL;
		@Override public ParserRule getRule() { return rule; }
		
		//val=REAL
		public Assignment getValAssignment() { return cValAssignment; }
		
		//REAL
		public RuleCall getValREALParserRuleCall_0() { return cValREALParserRuleCall_0; }
	}
	public class IntVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.IntVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationStatementCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationStatementIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationStatementCrossReference_0.eContents().get(1);
		
		//IntVarExpression:
		//	var=[VariableDeclarationStatement];
		@Override public ParserRule getRule() { return rule; }
		
		//var=[VariableDeclarationStatement]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclarationStatement]
		public CrossReference getVarVariableDeclarationStatementCrossReference_0() { return cVarVariableDeclarationStatementCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationStatementIDTerminalRuleCall_0_1() { return cVarVariableDeclarationStatementIDTerminalRuleCall_0_1; }
	}
	public class REALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.REAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//REAL ecore::EFloat hidden():
		//	INT? "." INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT? "." INT
		public Group getGroup() { return cGroup; }
		
		//INT?
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//"."
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class FunctionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.Functions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCountFunctionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAvgFunctionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSumFunctionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMinFunctionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cMaxFunctionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		///*
		// * 
		// * Different Functions
		// * 
		// */ Functions:
		//	CountFunction | AvgFunction | SumFunction | MinFunction | MaxFunction;
		@Override public ParserRule getRule() { return rule; }
		
		//CountFunction | AvgFunction | SumFunction | MinFunction | MaxFunction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CountFunction
		public RuleCall getCountFunctionParserRuleCall_0() { return cCountFunctionParserRuleCall_0; }
		
		//AvgFunction
		public RuleCall getAvgFunctionParserRuleCall_1() { return cAvgFunctionParserRuleCall_1; }
		
		//SumFunction
		public RuleCall getSumFunctionParserRuleCall_2() { return cSumFunctionParserRuleCall_2; }
		
		//MinFunction
		public RuleCall getMinFunctionParserRuleCall_3() { return cMinFunctionParserRuleCall_3; }
		
		//MaxFunction
		public RuleCall getMaxFunctionParserRuleCall_4() { return cMaxFunctionParserRuleCall_4; }
	}
	public class CountFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.CountFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cCOUNTKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnCDCrossReference_3_0 = (CrossReference)cColumnAssignment_3.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnCDCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cXAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXFromAndWhereClausesParserRuleCall_5_0 = (RuleCall)cXAssignment_5.eContents().get(0);
		
		//CountFunction:
		//	"SELECT" "COUNT" "(" column+=[CD] ")" x=FromAndWhereClauses;
		@Override public ParserRule getRule() { return rule; }
		
		//"SELECT" "COUNT" "(" column+=[CD] ")" x=FromAndWhereClauses
		public Group getGroup() { return cGroup; }
		
		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//"COUNT"
		public Keyword getCOUNTKeyword_1() { return cCOUNTKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_3_0() { return cColumnCDCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_3_0_1() { return cColumnCDIDTerminalRuleCall_3_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//x=FromAndWhereClauses
		public Assignment getXAssignment_5() { return cXAssignment_5; }
		
		//FromAndWhereClauses
		public RuleCall getXFromAndWhereClausesParserRuleCall_5_0() { return cXFromAndWhereClausesParserRuleCall_5_0; }
	}
	public class AvgFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.AvgFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAVGKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnCDCrossReference_3_0 = (CrossReference)cColumnAssignment_3.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnCDCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cXAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXFromAndWhereClausesParserRuleCall_5_0 = (RuleCall)cXAssignment_5.eContents().get(0);
		
		//AvgFunction:
		//	"SELECT" "AVG" "(" column+=[CD] ")" x=FromAndWhereClauses;
		@Override public ParserRule getRule() { return rule; }
		
		//"SELECT" "AVG" "(" column+=[CD] ")" x=FromAndWhereClauses
		public Group getGroup() { return cGroup; }
		
		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//"AVG"
		public Keyword getAVGKeyword_1() { return cAVGKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_3_0() { return cColumnCDCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_3_0_1() { return cColumnCDIDTerminalRuleCall_3_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//x=FromAndWhereClauses
		public Assignment getXAssignment_5() { return cXAssignment_5; }
		
		//FromAndWhereClauses
		public RuleCall getXFromAndWhereClausesParserRuleCall_5_0() { return cXFromAndWhereClausesParserRuleCall_5_0; }
	}
	public class SumFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.SumFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cSUMKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnCDCrossReference_3_0 = (CrossReference)cColumnAssignment_3.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnCDCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cXAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXFromAndWhereClausesParserRuleCall_5_0 = (RuleCall)cXAssignment_5.eContents().get(0);
		
		//SumFunction:
		//	"SELECT" "SUM" "(" column+=[CD] ")" x=FromAndWhereClauses;
		@Override public ParserRule getRule() { return rule; }
		
		//"SELECT" "SUM" "(" column+=[CD] ")" x=FromAndWhereClauses
		public Group getGroup() { return cGroup; }
		
		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//"SUM"
		public Keyword getSUMKeyword_1() { return cSUMKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_3_0() { return cColumnCDCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_3_0_1() { return cColumnCDIDTerminalRuleCall_3_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//x=FromAndWhereClauses
		public Assignment getXAssignment_5() { return cXAssignment_5; }
		
		//FromAndWhereClauses
		public RuleCall getXFromAndWhereClausesParserRuleCall_5_0() { return cXFromAndWhereClausesParserRuleCall_5_0; }
	}
	public class MinFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.MinFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMINKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnCDCrossReference_3_0 = (CrossReference)cColumnAssignment_3.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnCDCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cXAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXFromAndWhereClausesParserRuleCall_5_0 = (RuleCall)cXAssignment_5.eContents().get(0);
		
		//MinFunction:
		//	"SELECT" "MIN" "(" column+=[CD] ")" x=FromAndWhereClauses;
		@Override public ParserRule getRule() { return rule; }
		
		//"SELECT" "MIN" "(" column+=[CD] ")" x=FromAndWhereClauses
		public Group getGroup() { return cGroup; }
		
		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//"MIN"
		public Keyword getMINKeyword_1() { return cMINKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_3_0() { return cColumnCDCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_3_0_1() { return cColumnCDIDTerminalRuleCall_3_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//x=FromAndWhereClauses
		public Assignment getXAssignment_5() { return cXAssignment_5; }
		
		//FromAndWhereClauses
		public RuleCall getXFromAndWhereClausesParserRuleCall_5_0() { return cXFromAndWhereClausesParserRuleCall_5_0; }
	}
	public class MaxFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.MaxFunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cMAXKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cColumnAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cColumnCDCrossReference_3_0 = (CrossReference)cColumnAssignment_3.eContents().get(0);
		private final RuleCall cColumnCDIDTerminalRuleCall_3_0_1 = (RuleCall)cColumnCDCrossReference_3_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cXAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cXFromAndWhereClausesParserRuleCall_5_0 = (RuleCall)cXAssignment_5.eContents().get(0);
		
		//MaxFunction:
		//	"SELECT" "MAX" "(" column+=[CD] ")" x=FromAndWhereClauses;
		@Override public ParserRule getRule() { return rule; }
		
		//"SELECT" "MAX" "(" column+=[CD] ")" x=FromAndWhereClauses
		public Group getGroup() { return cGroup; }
		
		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//"MAX"
		public Keyword getMAXKeyword_1() { return cMAXKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//column+=[CD]
		public Assignment getColumnAssignment_3() { return cColumnAssignment_3; }
		
		//[CD]
		public CrossReference getColumnCDCrossReference_3_0() { return cColumnCDCrossReference_3_0; }
		
		//ID
		public RuleCall getColumnCDIDTerminalRuleCall_3_0_1() { return cColumnCDIDTerminalRuleCall_3_0_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//x=FromAndWhereClauses
		public Assignment getXAssignment_5() { return cXAssignment_5; }
		
		//FromAndWhereClauses
		public RuleCall getXFromAndWhereClausesParserRuleCall_5_0() { return cXFromAndWhereClausesParserRuleCall_5_0; }
	}
	
	public class DataStructureTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "uk.ac.kcl.dsl.Sql_dsl.DataStructureType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cVARCHAREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cVARCHARVarcharKeyword_0_0 = (Keyword)cVARCHAREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCHAREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCHARCharKeyword_1_0 = (Keyword)cCHAREnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cDATEEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cDATEDateKeyword_2_0 = (Keyword)cDATEEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cINTEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cINTIntKeyword_3_0 = (Keyword)cINTEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cFLOATEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cFLOATFloatKeyword_4_0 = (Keyword)cFLOATEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cTIMEEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cTIMETimeKeyword_5_0 = (Keyword)cTIMEEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cTEXTEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cTEXTTextKeyword_6_0 = (Keyword)cTEXTEnumLiteralDeclaration_6.eContents().get(0);
		
		//enum DataStructureType:
		//	VARCHAR="varchar" | CHAR="char" | DATE="date" | INT="int" | FLOAT="float" | TIME="time" | TEXT="text";
		public EnumRule getRule() { return rule; }
		
		//VARCHAR="varchar" | CHAR="char" | DATE="date" | INT="int" | FLOAT="float" | TIME="time" | TEXT="text"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//VARCHAR="varchar"
		public EnumLiteralDeclaration getVARCHAREnumLiteralDeclaration_0() { return cVARCHAREnumLiteralDeclaration_0; }
		
		//"varchar"
		public Keyword getVARCHARVarcharKeyword_0_0() { return cVARCHARVarcharKeyword_0_0; }
		
		//CHAR="char"
		public EnumLiteralDeclaration getCHAREnumLiteralDeclaration_1() { return cCHAREnumLiteralDeclaration_1; }
		
		//"char"
		public Keyword getCHARCharKeyword_1_0() { return cCHARCharKeyword_1_0; }
		
		//DATE="date"
		public EnumLiteralDeclaration getDATEEnumLiteralDeclaration_2() { return cDATEEnumLiteralDeclaration_2; }
		
		//"date"
		public Keyword getDATEDateKeyword_2_0() { return cDATEDateKeyword_2_0; }
		
		//INT="int"
		public EnumLiteralDeclaration getINTEnumLiteralDeclaration_3() { return cINTEnumLiteralDeclaration_3; }
		
		//"int"
		public Keyword getINTIntKeyword_3_0() { return cINTIntKeyword_3_0; }
		
		//FLOAT="float"
		public EnumLiteralDeclaration getFLOATEnumLiteralDeclaration_4() { return cFLOATEnumLiteralDeclaration_4; }
		
		//"float"
		public Keyword getFLOATFloatKeyword_4_0() { return cFLOATFloatKeyword_4_0; }
		
		//TIME="time"
		public EnumLiteralDeclaration getTIMEEnumLiteralDeclaration_5() { return cTIMEEnumLiteralDeclaration_5; }
		
		//"time"
		public Keyword getTIMETimeKeyword_5_0() { return cTIMETimeKeyword_5_0; }
		
		//TEXT="text"
		public EnumLiteralDeclaration getTEXTEnumLiteralDeclaration_6() { return cTEXTEnumLiteralDeclaration_6; }
		
		//"text"
		public Keyword getTEXTTextKeyword_6_0() { return cTEXTTextKeyword_6_0; }
	}
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final SelectStatementElements pSelectStatement;
	private final FromAndWhereClausesElements pFromAndWhereClauses;
	private final WhereDecElements pWhereDec;
	private final RightOperandOneElements pRightOperandOne;
	private final RightOperandTwoElements pRightOperandTwo;
	private final RightOperandThreeElements pRightOperandThree;
	private final DatabaseDeclarationStatementElements pDatabaseDeclarationStatement;
	private final CreateTableStatementElements pCreateTableStatement;
	private final TableDeclarationElements pTableDeclaration;
	private final TableNameElements pTableName;
	private final ColumnDeclarationElements pColumnDeclaration;
	private final ColumnReferencingElements pColumnReferencing;
	private final PrimaryKeyElements pPrimaryKey;
	private final ForeignKeyElements pForeignKey;
	private final DataStructureTypeElements eDataStructureType;
	private final DropTableStatementElements pDropTableStatement;
	private final TruncateTableStatementElements pTruncateTableStatement;
	private final DeleteTableStatementElements pDeleteTableStatement;
	private final UpdateTableStatementElements pUpdateTableStatement;
	private final SetClauseElements pSetClause;
	private final AlterTableStatementElements pAlterTableStatement;
	private final AlterDropStatementElements pAlterDropStatement;
	private final AlterAddStatementElements pAlterAddStatement;
	private final AlterUpdateStatementElements pAlterUpdateStatement;
	private final VariableDeclarationStatementElements pVariableDeclarationStatement;
	private final IntLiteralElements pIntLiteral;
	private final RealLiteralElements pRealLiteral;
	private final IntVarExpressionElements pIntVarExpression;
	private final REALElements pREAL;
	private final FunctionsElements pFunctions;
	private final CountFunctionElements pCountFunction;
	private final AvgFunctionElements pAvgFunction;
	private final SumFunctionElements pSumFunction;
	private final MinFunctionElements pMinFunction;
	private final MaxFunctionElements pMaxFunction;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public Sql_dslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.pSelectStatement = new SelectStatementElements();
		this.pFromAndWhereClauses = new FromAndWhereClausesElements();
		this.pWhereDec = new WhereDecElements();
		this.pRightOperandOne = new RightOperandOneElements();
		this.pRightOperandTwo = new RightOperandTwoElements();
		this.pRightOperandThree = new RightOperandThreeElements();
		this.pDatabaseDeclarationStatement = new DatabaseDeclarationStatementElements();
		this.pCreateTableStatement = new CreateTableStatementElements();
		this.pTableDeclaration = new TableDeclarationElements();
		this.pTableName = new TableNameElements();
		this.pColumnDeclaration = new ColumnDeclarationElements();
		this.pColumnReferencing = new ColumnReferencingElements();
		this.pPrimaryKey = new PrimaryKeyElements();
		this.pForeignKey = new ForeignKeyElements();
		this.eDataStructureType = new DataStructureTypeElements();
		this.pDropTableStatement = new DropTableStatementElements();
		this.pTruncateTableStatement = new TruncateTableStatementElements();
		this.pDeleteTableStatement = new DeleteTableStatementElements();
		this.pUpdateTableStatement = new UpdateTableStatementElements();
		this.pSetClause = new SetClauseElements();
		this.pAlterTableStatement = new AlterTableStatementElements();
		this.pAlterDropStatement = new AlterDropStatementElements();
		this.pAlterAddStatement = new AlterAddStatementElements();
		this.pAlterUpdateStatement = new AlterUpdateStatementElements();
		this.pVariableDeclarationStatement = new VariableDeclarationStatementElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pRealLiteral = new RealLiteralElements();
		this.pIntVarExpression = new IntVarExpressionElements();
		this.pREAL = new REALElements();
		this.pFunctions = new FunctionsElements();
		this.pCountFunction = new CountFunctionElements();
		this.pAvgFunction = new AvgFunctionElements();
		this.pSumFunction = new SumFunctionElements();
		this.pMinFunction = new MinFunctionElements();
		this.pMaxFunction = new MaxFunctionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("uk.ac.kcl.dsl.Sql_dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	statements+=Statement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//	DatabaseDeclarationStatement | CreateTableStatement | DropTableStatement | TruncateTableStatement |
	//	AlterTableStatement | VariableDeclarationStatement | SelectStatement | DeleteTableStatement | UpdateTableStatement |
	//	Functions;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	///*
	// * 
	// * Select Statement
	// * 
	// */ SelectStatement:
	//	"SELECT" ("*" | (column+=[CD] ("," column+=[CD])*)*) x=FromAndWhereClauses;
	public SelectStatementElements getSelectStatementAccess() {
		return pSelectStatement;
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}
	
	//FromAndWhereClauses:
	//	"FROM" table=[TableName] ("WHERE" z+=WhereDec (("AND" | "OR") z+=WhereDec)*)?;
	public FromAndWhereClausesElements getFromAndWhereClausesAccess() {
		return pFromAndWhereClauses;
	}
	
	public ParserRule getFromAndWhereClausesRule() {
		return getFromAndWhereClausesAccess().getRule();
	}
	
	//WhereDec:
	//	column+=[CD] sign=("=" | "<" | "<=" | ">" | ">=" | "!=" | "LIKE") rightOperand=(RightOperandOne | RightOperandTwo |
	//	RightOperandThree);
	public WhereDecElements getWhereDecAccess() {
		return pWhereDec;
	}
	
	public ParserRule getWhereDecRule() {
		return getWhereDecAccess().getRule();
	}
	
	//RightOperandOne:
	//	"#" name=ID "#";
	public RightOperandOneElements getRightOperandOneAccess() {
		return pRightOperandOne;
	}
	
	public ParserRule getRightOperandOneRule() {
		return getRightOperandOneAccess().getRule();
	}
	
	//RightOperandTwo:
	//	column+=[CD];
	public RightOperandTwoElements getRightOperandTwoAccess() {
		return pRightOperandTwo;
	}
	
	public ParserRule getRightOperandTwoRule() {
		return getRightOperandTwoAccess().getRule();
	}
	
	//RightOperandThree:
	//	val=INT;
	public RightOperandThreeElements getRightOperandThreeAccess() {
		return pRightOperandThree;
	}
	
	public ParserRule getRightOperandThreeRule() {
		return getRightOperandThreeAccess().getRule();
	}
	
	///*
	// * 
	// * Database Declaration
	// * 
	// */ DatabaseDeclarationStatement:
	//	"CREATE" "DATABASE" name=ID;
	public DatabaseDeclarationStatementElements getDatabaseDeclarationStatementAccess() {
		return pDatabaseDeclarationStatement;
	}
	
	public ParserRule getDatabaseDeclarationStatementRule() {
		return getDatabaseDeclarationStatementAccess().getRule();
	}
	
	///*
	// * 
	// * Create Table Declaration
	// * 
	// */ CreateTableStatement:
	//	tables+=TableDeclaration+;
	public CreateTableStatementElements getCreateTableStatementAccess() {
		return pCreateTableStatement;
	}
	
	public ParserRule getCreateTableStatementRule() {
		return getCreateTableStatementAccess().getRule();
	}
	
	//TableDeclaration: // Create statement for the table generation
	//	"CREATE" "TABLE" table+=tableName "(" attributes+=(ColumnDeclaration | PrimaryKey | ForeignKey)+ (","
	//	attributes+=(ColumnDeclaration | PrimaryKey | ForeignKey))* ")";
	public TableDeclarationElements getTableDeclarationAccess() {
		return pTableDeclaration;
	}
	
	public ParserRule getTableDeclarationRule() {
		return getTableDeclarationAccess().getRule();
	}
	
	//tableName TableName:
	//	name=ID;
	public TableNameElements getTableNameAccess() {
		return pTableName;
	}
	
	public ParserRule getTableNameRule() {
		return getTableNameAccess().getRule();
	}
	
	//ColumnDeclaration CD:
	//	name=ID type=DataStructureType notNull?="NOT NULL"?;
	public ColumnDeclarationElements getColumnDeclarationAccess() {
		return pColumnDeclaration;
	}
	
	public ParserRule getColumnDeclarationRule() {
		return getColumnDeclarationAccess().getRule();
	}
	
	//ColumnReferencing:
	//	var=[CD];
	public ColumnReferencingElements getColumnReferencingAccess() {
		return pColumnReferencing;
	}
	
	public ParserRule getColumnReferencingRule() {
		return getColumnReferencingAccess().getRule();
	}
	
	//PrimaryKey:
	//	"PRIMARY" "KEY" "("
	//	columnAsPK+=[CD] ("," columnAsPK+=[CD])*
	//	")";
	public PrimaryKeyElements getPrimaryKeyAccess() {
		return pPrimaryKey;
	}
	
	public ParserRule getPrimaryKeyRule() {
		return getPrimaryKeyAccess().getRule();
	}
	
	//ForeignKey:
	//	"FOREIGN" "KEY" "("
	//	columnAsFK+=[CD] ("," columnAsFK+=[CD])* ")"
	//	"REFERENCES" foreignTable=[TableDeclaration]
	//	"(" foreignColumns+=[CD] ("," foreignColumns+=[CD])* ")";
	public ForeignKeyElements getForeignKeyAccess() {
		return pForeignKey;
	}
	
	public ParserRule getForeignKeyRule() {
		return getForeignKeyAccess().getRule();
	}
	
	//enum DataStructureType:
	//	VARCHAR="varchar" | CHAR="char" | DATE="date" | INT="int" | FLOAT="float" | TIME="time" | TEXT="text";
	public DataStructureTypeElements getDataStructureTypeAccess() {
		return eDataStructureType;
	}
	
	public EnumRule getDataStructureTypeRule() {
		return getDataStructureTypeAccess().getRule();
	}
	
	///*
	// * 
	// * Drop Table Statement
	// * 
	// */ DropTableStatement:
	//	"DROP" "TABLE" table+=[TableName] ("," table+=[TableName])*;
	public DropTableStatementElements getDropTableStatementAccess() {
		return pDropTableStatement;
	}
	
	public ParserRule getDropTableStatementRule() {
		return getDropTableStatementAccess().getRule();
	}
	
	///*
	// * 
	// * Truncate Table Statement
	// * 
	// */ TruncateTableStatement:
	//	"TRUNCATE" "TABLE" table+=[TableName] ("," table+=[TableName])*;
	public TruncateTableStatementElements getTruncateTableStatementAccess() {
		return pTruncateTableStatement;
	}
	
	public ParserRule getTruncateTableStatementRule() {
		return getTruncateTableStatementAccess().getRule();
	}
	
	///*
	// * 
	// * Delete Table Statement
	// * 
	// * 
	// */ DeleteTableStatement:
	//	"DELETE" x=FromAndWhereClauses;
	public DeleteTableStatementElements getDeleteTableStatementAccess() {
		return pDeleteTableStatement;
	}
	
	public ParserRule getDeleteTableStatementRule() {
		return getDeleteTableStatementAccess().getRule();
	}
	
	///*
	// * 
	// * Update Table Statement
	// * 
	// * 
	// */ UpdateTableStatement:
	//	"UPDATE" table+=[TableName] "SET" sc+=SetClause ("," sc+=SetClause)* ("WHERE" z+=WhereDec (("AND" | "OR")
	//	z+=WhereDec)*)?;
	public UpdateTableStatementElements getUpdateTableStatementAccess() {
		return pUpdateTableStatement;
	}
	
	public ParserRule getUpdateTableStatementRule() {
		return getUpdateTableStatementAccess().getRule();
	}
	
	//SetClause:
	//	column+=[CD] "=" ("#" name=ID "#" | val=INT);
	public SetClauseElements getSetClauseAccess() {
		return pSetClause;
	}
	
	public ParserRule getSetClauseRule() {
		return getSetClauseAccess().getRule();
	}
	
	///*
	// * 
	// * Alter Table Statement
	// * 
	// * 
	// */ AlterTableStatement:
	//	"ALTER" "TABLE" table+=[TableName] addDropUpdate=(AlterDropStatement | AlterAddStatement | AlterUpdateStatement);
	public AlterTableStatementElements getAlterTableStatementAccess() {
		return pAlterTableStatement;
	}
	
	public ParserRule getAlterTableStatementRule() {
		return getAlterTableStatementAccess().getRule();
	}
	
	//AlterDropStatement:
	//	"DROP" "COLUMN" column+=[CD];
	public AlterDropStatementElements getAlterDropStatementAccess() {
		return pAlterDropStatement;
	}
	
	public ParserRule getAlterDropStatementRule() {
		return getAlterDropStatementAccess().getRule();
	}
	
	//AlterAddStatement:
	//	"ADD" column+=[CD];
	public AlterAddStatementElements getAlterAddStatementAccess() {
		return pAlterAddStatement;
	}
	
	public ParserRule getAlterAddStatementRule() {
		return getAlterAddStatementAccess().getRule();
	}
	
	//AlterUpdateStatement:
	//	"ALTER" "COLUMN" column+=[CD];
	public AlterUpdateStatementElements getAlterUpdateStatementAccess() {
		return pAlterUpdateStatement;
	}
	
	public ParserRule getAlterUpdateStatementRule() {
		return getAlterUpdateStatementAccess().getRule();
	}
	
	///*
	// * 
	// * Variable Declaration
	// * 
	// */ VariableDeclarationStatement:
	//	"var" name=ID "=" value=INT;
	public VariableDeclarationStatementElements getVariableDeclarationStatementAccess() {
		return pVariableDeclarationStatement;
	}
	
	public ParserRule getVariableDeclarationStatementRule() {
		return getVariableDeclarationStatementAccess().getRule();
	}
	
	//IntLiteral:
	//	val=INT;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//RealLiteral:
	//	val=REAL;
	public RealLiteralElements getRealLiteralAccess() {
		return pRealLiteral;
	}
	
	public ParserRule getRealLiteralRule() {
		return getRealLiteralAccess().getRule();
	}
	
	//IntVarExpression:
	//	var=[VariableDeclarationStatement];
	public IntVarExpressionElements getIntVarExpressionAccess() {
		return pIntVarExpression;
	}
	
	public ParserRule getIntVarExpressionRule() {
		return getIntVarExpressionAccess().getRule();
	}
	
	//REAL ecore::EFloat hidden():
	//	INT? "." INT;
	public REALElements getREALAccess() {
		return pREAL;
	}
	
	public ParserRule getREALRule() {
		return getREALAccess().getRule();
	}
	
	///*
	// * 
	// * Different Functions
	// * 
	// */ Functions:
	//	CountFunction | AvgFunction | SumFunction | MinFunction | MaxFunction;
	public FunctionsElements getFunctionsAccess() {
		return pFunctions;
	}
	
	public ParserRule getFunctionsRule() {
		return getFunctionsAccess().getRule();
	}
	
	//CountFunction:
	//	"SELECT" "COUNT" "(" column+=[CD] ")" x=FromAndWhereClauses;
	public CountFunctionElements getCountFunctionAccess() {
		return pCountFunction;
	}
	
	public ParserRule getCountFunctionRule() {
		return getCountFunctionAccess().getRule();
	}
	
	//AvgFunction:
	//	"SELECT" "AVG" "(" column+=[CD] ")" x=FromAndWhereClauses;
	public AvgFunctionElements getAvgFunctionAccess() {
		return pAvgFunction;
	}
	
	public ParserRule getAvgFunctionRule() {
		return getAvgFunctionAccess().getRule();
	}
	
	//SumFunction:
	//	"SELECT" "SUM" "(" column+=[CD] ")" x=FromAndWhereClauses;
	public SumFunctionElements getSumFunctionAccess() {
		return pSumFunction;
	}
	
	public ParserRule getSumFunctionRule() {
		return getSumFunctionAccess().getRule();
	}
	
	//MinFunction:
	//	"SELECT" "MIN" "(" column+=[CD] ")" x=FromAndWhereClauses;
	public MinFunctionElements getMinFunctionAccess() {
		return pMinFunction;
	}
	
	public ParserRule getMinFunctionRule() {
		return getMinFunctionAccess().getRule();
	}
	
	//MaxFunction:
	//	"SELECT" "MAX" "(" column+=[CD] ")" x=FromAndWhereClauses;
	public MaxFunctionElements getMaxFunctionAccess() {
		return pMaxFunction;
	}
	
	public ParserRule getMaxFunctionRule() {
		return getMaxFunctionAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
