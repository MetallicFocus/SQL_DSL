grammar uk.ac.kcl.dsl.Sql_dsl with org.eclipse.xtext.common.Terminals

generate sql_dsl "http://www.ac.uk/kcl/dsl/Sql_dsl"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

	
Model:
	statements += Statement*
;

Statement:
	DatabaseDeclarationStatement |
	CreateTableStatement |
	DropTableStatement |
	TruncateTableStatement |
	AlterTableStatement |
	VariableDeclarationStatement |
	SelectStatement |
	DeleteTableStatement |
	UpdateTableStatement |
	Functions
;

/*
 * 
 * Select Statement
 * 
 */

SelectStatement:
	"SELECT" ("*" | (column+=[CD] ("," column+=[CD])*)* ) 
	x=FromAndWhereClauses
;

FromAndWhereClauses:
	"FROM" table+=[TableName] 
	("WHERE" z+=WhereDec (("AND" | "OR") z+=WhereDec)* )?
;

WhereDec:
	(column+=[CD] ("="|"<"|"<="|">"|">="|"!="|"LIKE") (("#" name=ID "#") | column+=[CD] | val = INT) )
;


/*
 * 
 * Database Declaration
 * 
 */

DatabaseDeclarationStatement:
	"CREATE" "DATABASE" name=ID
;


/*
 * 
 * Create Table Declaration
 * 
 */

CreateTableStatement:
	// Must contain at least one table declaration
	tables+=TableDeclaration+
;
	
TableDeclaration:
	// Create statement for the table generation
	"CREATE" "TABLE" table+=tableName "(" attributes+=(ColumnDeclaration | PrimaryKey | ForeignKey)+ 
		("," attributes+=(ColumnDeclaration | PrimaryKey | ForeignKey))*
	")"
;

tableName returns TableName:
	name=ID
;
	
ColumnDeclaration returns CD:
	name=ID type=DataStructureType notNull?=("NOT NULL")?
;

PrimaryKey returns PrimaryKey:
	"PRIMARY" "KEY" "(" 
		columnAsPK+=[CD] ("," columnAsPK+=[CD])*
	")"
;

ForeignKey returns ForeignKey:
	"FOREIGN" "KEY" "(" 
		columnAsFK+=[CD] ("," columnAsFK+=[CD])* ")" 
	"REFERENCES" foreignTable=[TableDeclaration] 
	"(" foreignColumns+=[CD] ("," foreignColumns+=[CD])* ")"
;

enum DataStructureType:
	VARCHAR="varchar" | CHAR="char" | DATE="date" | INT="int" | FLOAT="float" | TIME="time" | TEXT="text"
;

/*
 * 
 * Drop Table Statement
 * 
 */

DropTableStatement:
	"DROP" "TABLE" table+=[TableName]
;

/*
 * 
 * Truncate Table Statement
 * 
 */

TruncateTableStatement:
	"TRUNCATE" "TABLE" table+=[TableName]
;

/*
 * 
 * Delete Table Statement
 * 
 * 
 */
 
DeleteTableStatement:
	"DELETE" x=FromAndWhereClauses
;

/*
 * 
 * Update Table Statement
 * 
 * 
 */
 
 UpdateTableStatement:
	"UPDATE" table+=[TableName] "SET" sc+=SetClause ("," sc+=SetClause)* ("WHERE" z+=WhereDec (("AND" | "OR") z+=WhereDec)* )?
;

SetClause:
	(column+=[CD] "=" (("#" name=ID "#") | val = INT) ) 
;
 

/*
 * 
 * Alter Table Statement
 * 
 * 
 */

 AlterTableStatement:
 	"ALTER" "TABLE" table+=[TableName] addDropUpdate=(AlterDropStatement | AlterAddStatement | AlterUpdateStatement)
 ;
 
 AlterDropStatement:
 	"DROP" "COLUMN" column+=[CD]
 ;
 
 AlterAddStatement:
 	"ADD" column+=[CD]
 ;
 
 AlterUpdateStatement:
 	"ALTER" "COLUMN" column+=[CD]
 ;
 
 /*
 * 
 * Variable Declaration
 * 
 */

VariableDeclarationStatement:
	"var" name=ID "=" value=INT
;

IntLiteral:
	val = INT
;

RealLiteral:
	val = REAL
;

IntVarExpression:
	var = [VariableDeclarationStatement]
;

REAL returns ecore::EFloat hidden():
	INT? "." INT
;

/*
 * 
 * Different Functions
 * 
 */
 
Functions:
 	CountFunction |
 	AvgFunction |
 	SumFunction |
 	MinFunction |
 	MaxFunction
 ;
 
 CountFunction:
 	"SELECT" "COUNT" "(" column+=[CD] ")" x=FromAndWhereClauses
 ;
 
 AvgFunction:
 	"SELECT" "AVG" "(" column+=[CD] ")" x=FromAndWhereClauses
 ;
 
 SumFunction:
 	"SELECT" "SUM" "(" column+=[CD] ")" x=FromAndWhereClauses
 ;
 
 MinFunction:
 	"SELECT" "MIN" "(" column+=[CD] ")" x=FromAndWhereClauses
 ;
 
 MaxFunction:
 	"SELECT" "MAX" "(" column+=[CD] ")" x=FromAndWhereClauses
 ;