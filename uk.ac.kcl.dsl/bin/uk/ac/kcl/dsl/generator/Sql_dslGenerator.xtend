/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import uk.ac.kcl.dsl.sql_dsl.Model
import uk.ac.kcl.dsl.sql_dsl.DatabaseDeclarationStatement
import uk.ac.kcl.dsl.sql_dsl.Statement
import uk.ac.kcl.dsl.sql_dsl.CreateTableStatement
import uk.ac.kcl.dsl.sql_dsl.TableDeclaration
import uk.ac.kcl.dsl.sql_dsl.DropTableStatement
import uk.ac.kcl.dsl.sql_dsl.TruncateTableStatement
import uk.ac.kcl.dsl.sql_dsl.DeleteTableStatement
import uk.ac.kcl.dsl.sql_dsl.UpdateTableStatement

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class Sql_dslGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
//		fsa.generateFile('greetings.txt', 'People to greet: ' + 
//			resource.allContents
//				.filter(Greeting)
//				.map[name]
//				.join(', '))
		val model = resource.contents.head as Model
		fsa.generateFile(resource.URI.lastSegment + ".txt", model.doGenerate)
	}
	
	def String doGenerate(Model m) '''
		«m.statements.map[generateJavaStatement()].join('\n')»
	'''
	
	private static class Environment {
		var int counter = 0
		
		def getFreshVarName() '''i«counter++»'''
		
		def exit() { counter-- }
	}
	
	dispatch def String generateJavaStatement(Statement stmt) ''''''
	dispatch def String generateJavaStatement(DatabaseDeclarationStatement stmt) '''
	CREATE DATABASE «stmt.name»;
	'''
	dispatch def String generateJavaStatement(TableDeclaration stmt) '''
	CREATE TABLE «stmt.table» (
	
	«FOR at : stmt.attributes SEPARATOR ','»
	«stmt.getAttributes()»
	«ENDFOR»
	
	);
	'''
	
	dispatch def String generateJavaStatement(DropTableStatement stmt) '''
	
	«FOR i : 0 ..< stmt.getTable().size»
	DROP TABLE «stmt.getTable().get(i).name»;
	«ENDFOR»
	'''
	
	dispatch def String generateJavaStatement(TruncateTableStatement stmt) '''
	
	«FOR i : 0 ..< stmt.getTable().size»
	TRUNCATE TABLE «stmt.getTable().get(i).name»;
	«ENDFOR»
	'''
	// Need to figure out sizeOfStatement --> Rn it counts the number of elements inside Z (which is always 3)
	// How to get the value of rightOperand?
	dispatch def String generateJavaStatement(DeleteTableStatement stmt) '''
	DELETE FROM TABLE «stmt.x.getTable().name»
	«val sizeOfStatement = stmt.x.getZ().size-1»
	«IF sizeOfStatement == 1»
	WHERE «stmt.x.getZ().get(sizeOfStatement).getColumn().get(sizeOfStatement).name» «stmt.x.getZ().get(sizeOfStatement).sign» «stmt.x.getZ().get(sizeOfStatement).rightOperand»
	«ELSE»
	WHERE 
		«FOR i : 0 ..< sizeOfStatement»
	«stmt.x.getZ().get(i).getColumn().get(i).name» «stmt.x.getZ().get(i).sign» «stmt.x.getZ().get(i).rightOperand» AND
		«ENDFOR»
	«stmt.x.getZ().get(sizeOfStatement).getColumn().get(sizeOfStatement).name» «stmt.x.getZ().get(sizeOfStatement).sign» «stmt.x.getZ().get(sizeOfStatement).rightOperand»
	«ENDIF»
	;
	'''
	/*
	dispatch def String generateJavaStatement(UpdateTableStatement stmt) '''
	UPDATE TABLE «stmt.getTable()» SET 
	
	«FOR sc : stmt.sc SEPARATOR ','»
	«stmt.getSc()»
	«ENDFOR»
	
	;
	''' */
}