/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.dsl.scoping

import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.IScope
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import uk.ac.kcl.dsl.sql_dsl.IntVarExpression
import uk.ac.kcl.dsl.sql_dsl.CD
import uk.ac.kcl.dsl.sql_dsl.Model
import uk.ac.kcl.dsl.sql_dsl.WhereDec
import uk.ac.kcl.dsl.sql_dsl.VariableDeclarationStatement
import org.eclipse.xtext.EcoreUtil2
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.naming.QualifiedName
import org.eclipse.xtext.util.SimpleAttributeResolver
import org.eclipse.emf.ecore.EObject
import uk.ac.kcl.dsl.sql_dsl.Sql_dslPackage

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class Sql_dslScopeProvider extends AbstractSql_dslScopeProvider {

    /*
	override IScope getScope(EObject context, EReference ref) {
		if(ref == Sql_dslPackage.Literals.SET_CLAUSE__COLUMN) {
			return abcScope(context.g(Class))
		}
		super.getScope(context, ref)
	}
	
	dispatch def IScope visibleVariablesScope(CD ip) {
		ip.eContainer.visibleVariablesScope
	} 
	
	dispatch def IScope visibleVariablesScope(Model md) {
		scopeFor(md.statements.filter(VariableDeclarationStatement))
	}
	
	dispatch def IScope visibleVariablesScope(WhereDec wd) {
		wd.eContainer.internalVisibleVariablesScope
	}

	dispatch def IScope internalVisibleVariablesScope(Model tp) {
		scopeFor(tp.statements.filter(CD))
	}
	
	//dispatch def IScope internalVisibleVariablesScope(LoopStatement ls) {
	//	scopeFor(ls.statements.filter(VariableDeclaration), ls.eContainer.internalVisibleVariablesScope)
	//}
	*/

}
