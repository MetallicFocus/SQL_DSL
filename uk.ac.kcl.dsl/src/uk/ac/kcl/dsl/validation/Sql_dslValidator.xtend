/*
 * generated by Xtext 2.20.0
 */
package uk.ac.kcl.dsl.validation

import org.eclipse.xtext.validation.Check
import uk.ac.kcl.dsl.sql_dsl.DatabaseDeclarationStatement
import uk.ac.kcl.dsl.sql_dsl.Sql_dslPackage
import uk.ac.kcl.dsl.sql_dsl.SelectStatement

/** 
 * This class contains custom validation rules. 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class Sql_dslValidator extends AbstractSql_dslValidator { 

	public static val INVALID_DB_NAME = 'invalidDbName'
	public static val INVALID_SAME_SELECT_COLUMNS = 'invalidSameSelectColumns'
	
	 @Check
	 def checkDatabaseNamesAreUppercaseOnly(DatabaseDeclarationStatement databaseDeclarationStmt) {
	 	if(!databaseDeclarationStmt.getName().equals(databaseDeclarationStmt.getName().toUpperCase))
	 		warning("Database names should be only formed of capital letters", Sql_dslPackage.Literals.DATABASE_DECLARATION_STATEMENT__NAME, INVALID_DB_NAME);
	 }
	
	@Check
	 def checkSelectTableColumnsAreDifferent(SelectStatement selectStmt) {
	 	
	 	// This method checks if a SELECT statement contains unique columns to display
	 	
	 	for(var i = 0; i < selectStmt.column.size; i++)
	 		for(var j = 0; j < selectStmt.column.size; j++)
	 			if(selectStmt.column.get(i).equals(selectStmt.column.get(j)) && j != i)
	 				warning("Columns in select must be unique (not duplicated)", Sql_dslPackage.Literals.SELECT_STATEMENT__COLUMN, INVALID_SAME_SELECT_COLUMNS);
	 				
	 }
	 
	 // Give a sensible error message for keyword repetition or when entering a wrong keyword at a wrong time
	
}
